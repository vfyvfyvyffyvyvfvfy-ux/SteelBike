const { createClient } = require('@supabase/supabase-js');
const crypto = require('crypto');
const axios = require('axios');
const fs = require('fs');
const fetch = require('node-fetch');
// +++ Google Gemini API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!) +++
const { GoogleGenerativeAI } = require('@google/generative-ai');

// Gemini –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö credentials - —Ç–æ–ª—å–∫–æ API –∫–ª—é—á!

// +++ –§–£–ù–ö–¶–ò–Ø –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –° GEMINI +++
async function recognizeDocumentsWithGemini(supabaseAdmin, filePaths, countryCode) {
    console.log('üîç Starting Gemini OCR...');

    if (!process.env.GOOGLE_API_KEY) {
        throw new Error('GOOGLE_API_KEY not configured');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini
    const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });

    // –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    const imageParts = [];
    for (const path of filePaths) {
        const { data, error } = await supabaseAdmin.storage.from('passports').download(path);
        if (error) {
            console.error(`Failed to download ${path}:`, error);
            continue;
        }
        const buffer = await data.arrayBuffer();
        imageParts.push({
            inlineData: {
                data: Buffer.from(buffer).toString("base64"),
                mimeType: 'image/jpeg'
            }
        });
        console.log(`‚úÖ Downloaded ${path}`);
    }

    if (imageParts.length === 0) {
        return { error: 'No images to process' };
    }

    // –ü—Ä–æ–º–ø—Ç –¥–ª—è Gemini
    const prompt = `Analyze these document images from a user with '${countryCode}' citizenship.
Extract the following data into a single, minified JSON object with no comments or markdown:
{
  "full_name": "...",
  "last_name": "...",
  "first_name": "...",
  "middle_name": "...",
  "birth_date": "DD.MM.YYYY",
  "birth_place": "...",
  "gender": "male/female",
  "series": "...",
  "number": "...",
  "issue_date": "DD.MM.YYYY",
  "expiry_date": "DD.MM.YYYY",
  "issuing_authority": "...",
  "registration_address": "..."
}
Only include fields you can find. For middle_name, if it's part of the full name, extract it.`;

    // –í—ã–∑—ã–≤–∞–µ–º Gemini
    const result = await model.generateContent([prompt, ...imageParts]);
    const response = await result.response;
    const text = response.text();

    console.log('üìÑ Gemini response:', text);

    // –ü–∞—Ä—Å–∏–º JSON
    try {
        const cleanedText = text.replace(/```json/g, '').replace(/```/g, '').trim();
        return JSON.parse(cleanedText);
    } catch (e) {
        console.error("Failed to parse JSON:", text);
        return { error: "Failed to parse", raw_text: text };
    }
}

function createSupabaseAdmin() {
    if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
        throw new Error('Supabase service credentials are not configured.');
    }
    return createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);
}

function validateTelegramData(initData, botToken) {
    try {
        const urlParams = new URLSearchParams(initData);
        const hash = urlParams.get('hash');
        urlParams.delete('hash');

        const dataCheckString = Array.from(urlParams.entries())
            .sort(([a], [b]) => a.localeCompare(b))
            .map(([key, value]) => `${key}=${value}`)
            .join('\n');

        const secretKey = crypto.createHmac('sha256', 'WebAppData')
            .update(botToken)
            .digest();

        const hmac = crypto.createHmac('sha256', secretKey)
            .update(dataCheckString)
            .digest('hex');

        return hmac === hash;
    } catch (error) {
        console.error('Telegram data validation error:', error);
        return false;
    }
}

async function triggerOCRProcessing(userId, fileIds) {
    try {
        const ocrWorkerUrl = process.env.OCR_WORKER_URL;
        const internalSecret = process.env.INTERNAL_SECRET;

        if (!ocrWorkerUrl || !internalSecret) {
            console.warn('OCR Worker not configured, skipping OCR processing');
            return;
        }

        axios.post(`${ocrWorkerUrl}/process-document`, {
            userId,
            fileIds
        }, {
            headers: {
                'Content-Type': 'application/json',
                'X-Internal-Secret': internalSecret
            },
            timeout: 5000
        }).catch(error => {
            console.error('Failed to trigger OCR processing:', error.message);
        });

        console.log(`OCR processing triggered for user ${userId}`);
    } catch (error) {
        console.error('Error triggering OCR processing:', error);
    }
}

// +++ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –° GOOGLE CLOUD VISION +++
async function recognizeDocumentsWithVision(supabaseAdmin, filePaths, countryCode) {
    console.log('üîç Starting Vision OCR...');
    console.log('üìÅ Files to process:', filePaths);
    console.log('üåç Country code:', countryCode);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º credentials
    if (!process.env.GOOGLE_APPLICATION_CREDENTIALS && !process.env.GOOGLE_APPLICATION_CREDENTIALS_JSON) {
        console.error('‚ùå Google Cloud credentials not configured!');
        return {
            error: 'Google Cloud credentials not configured',
            full_name: null,
            birth_date: null,
            passport_number: null,
            issue_date: null,
            issuer: null,
            registration_address: null,
            raw_text: ''
        };
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Vision API –∫–ª–∏–µ–Ω—Ç
    let client;
    try {
        client = new vision.ImageAnnotatorClient({
            keyFilename: process.env.GOOGLE_APPLICATION_CREDENTIALS || './google-credentials.json'
        });
        console.log('‚úÖ Vision API client initialized');
    } catch (err) {
        console.error('‚ùå Failed to initialize Vision API client:', err);
        return {
            error: `Failed to initialize Vision API: ${err.message}`,
            full_name: null,
            birth_date: null,
            passport_number: null,
            issue_date: null,
            issuer: null,
            registration_address: null,
            raw_text: ''
        };
    }

    const allText = [];
    const recognizedData = {
        full_name: null,
        birth_date: null,
        passport_number: null,
        issue_date: null,
        issuer: null,
        registration_address: null,
        raw_text: ''
    };

    // –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for (const path of filePaths) {
        try {
            console.log(`üì• Downloading file: ${path}`);

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            const { data: listData, error: listError } = await supabaseAdmin.storage
                .from('passports')
                .list(path.split('/')[0]); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if (listError) {
                console.error(`‚ùå Failed to list files in folder:`, listError);
            } else {
                console.log(`üìÅ Files in folder:`, listData.map(f => f.name));
            }

            // –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
            const { data, error } = await supabaseAdmin.storage.from('passports').download(path);

            if (error) {
                console.error(`‚ùå Failed to download ${path}:`, error);
                console.error(`Error details:`, JSON.stringify(error, null, 2));

                // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π URL
                console.log(`üîÑ Trying public URL method...`);
                const { data: publicUrlData } = supabaseAdmin.storage
                    .from('passports')
                    .getPublicUrl(path);

                console.log(`üîó Public URL:`, publicUrlData.publicUrl);

                // –°–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ fetch
                const response = await fetch(publicUrlData.publicUrl);
                if (!response.ok) {
                    console.error(`‚ùå Failed to fetch from public URL: ${response.status}`);
                    continue;
                }

                const arrayBuffer = await response.arrayBuffer();
                const buffer = Buffer.from(arrayBuffer);
                console.log(`‚úÖ File downloaded via public URL, size: ${buffer.length} bytes`);

                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —ç—Ç–∏–º buffer
                const [result] = await client.textDetection(buffer);
                const detections = result.textAnnotations;

                console.log(`üìä Detections found: ${detections ? detections.length : 0}`);

                if (detections && detections.length > 0) {
                    const fullText = detections[0].description;
                    allText.push(fullText);
                    console.log(`‚úÖ OCR success for ${path}:`, fullText.substring(0, 200) + '...');
                }
                continue;
            }

            console.log(`‚úÖ File downloaded: ${path}, size: ${data.size} bytes`);

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Buffer –¥–ª—è Vision API
            const buffer = Buffer.from(await data.arrayBuffer());
            console.log(`üì¶ Buffer created, size: ${buffer.length} bytes`);

            // –í—ã–∑—ã–≤–∞–µ–º Vision API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            console.log(`üîç Calling Vision API for ${path}...`);
            const [result] = await client.textDetection(buffer);
            const detections = result.textAnnotations;

            console.log(`üìä Detections found: ${detections ? detections.length : 0}`);

            if (detections && detections.length > 0) {
                // –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                const fullText = detections[0].description;
                allText.push(fullText);
                console.log(`‚úÖ OCR success for ${path}:`, fullText.substring(0, 200) + '...');
            } else {
                console.warn(`‚ö†Ô∏è No text detected in ${path}`);
            }
        } catch (err) {
            console.error(`‚ùå Error processing ${path}:`, err.message);
            console.error('Stack:', err.stack);
        }
    }

    if (allText.length === 0) {
        console.warn("‚ö†Ô∏è No text recognized from any images!");
        return {
            ...recognizedData,
            error: 'No text recognized from images'
        };
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    const combinedText = allText.join('\n\n');
    recognizedData.raw_text = combinedText;

    console.log(`üìù Combined text length: ${combinedText.length} characters`);
    console.log(`üìÑ First 500 chars:`, combinedText.substring(0, 500));

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω—ã
    if (countryCode === 'ru') {
        // –†–æ—Å—Å–∏–π—Å–∫–∏–π –ø–∞—Å–ø–æ—Ä—Ç
        recognizedData.full_name = extractRussianName(combinedText);
        recognizedData.birth_date = extractBirthDate(combinedText);
        recognizedData.passport_number = extractPassportNumber(combinedText);
        recognizedData.issue_date = extractIssueDate(combinedText);
        recognizedData.issuer = extractIssuer(combinedText);
        recognizedData.registration_address = extractAddress(combinedText);
    } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω - –±–∞–∑–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
        recognizedData.full_name = extractInternationalName(combinedText);
        recognizedData.birth_date = extractBirthDate(combinedText);
        recognizedData.passport_number = extractInternationalPassport(combinedText);
    }

    return recognizedData;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
function extractRussianName(text) {
    // –ò—â–µ–º –§–ò–û –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ "–§–∞–º–∏–ª–∏—è" –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const nameMatch = text.match(/(?:–§–∞–º–∏–ª–∏—è|Surname)[:\s]*([–ê-–Ø–Å]+)[:\s]*([–ê-–Ø–Å]+)[:\s]*([–ê-–Ø–Å]+)/i);
    if (nameMatch) {
        return `${nameMatch[1]} ${nameMatch[2]} ${nameMatch[3]}`;
    }
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
    const altMatch = text.match(/([–ê-–Ø–Å][–∞-—è—ë]+)\s+([–ê-–Ø–Å][–∞-—è—ë]+)\s+([–ê-–Ø–Å][–∞-—è—ë]+)/);
    return altMatch ? `${altMatch[1]} ${altMatch[2]} ${altMatch[3]}` : null;
}

function extractInternationalName(text) {
    // –ò—â–µ–º –∏–º—è –≤ –ª–∞—Ç–∏–Ω–∏—Ü–µ
    const nameMatch = text.match(/([A-Z][a-z]+)\s+([A-Z][a-z]+)(?:\s+([A-Z][a-z]+))?/);
    return nameMatch ? nameMatch[0] : null;
}

function extractBirthDate(text) {
    // –ò—â–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ DD.MM.YYYY
    const dateMatch = text.match(/(?:–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è|Date of birth|Birth)[:\s]*(\d{2}[.\-\/]\d{2}[.\-\/]\d{4})/i);
    if (dateMatch) return dateMatch[1];

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ª—é–±–æ–π –¥–∞—Ç—ã
    const altMatch = text.match(/(\d{2}[.\-\/]\d{2}[.\-\/]\d{4})/);
    return altMatch ? altMatch[1] : null;
}

function extractPassportNumber(text) {
    // –†–æ—Å—Å–∏–π—Å–∫–∏–π –ø–∞—Å–ø–æ—Ä—Ç: —Å–µ—Ä–∏—è (4 —Ü–∏—Ñ—Ä—ã) –Ω–æ–º–µ—Ä (6 —Ü–∏—Ñ—Ä)
    const passportMatch = text.match(/(\d{4})\s*(\d{6})/);
    return passportMatch ? `${passportMatch[1]} ${passportMatch[2]}` : null;
}

function extractInternationalPassport(text) {
    // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –ø–∞—Å–ø–æ—Ä—Ç: –æ–±—ã—á–Ω–æ –±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã
    const passportMatch = text.match(/([A-Z]{1,2}\d{7,9})/);
    return passportMatch ? passportMatch[1] : null;
}

function extractIssueDate(text) {
    // –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏
    const dateMatch = text.match(/(?:–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏|Issue date)[:\s]*(\d{2}[.\-\/]\d{2}[.\-\/]\d{4})/i);
    return dateMatch ? dateMatch[1] : null;
}

function extractIssuer(text) {
    // –ö–µ–º –≤—ã–¥–∞–Ω
    const issuerMatch = text.match(/(?:–ö–µ–º –≤—ã–¥–∞–Ω|Issued by)[:\s]*([^\n]{10,100})/i);
    return issuerMatch ? issuerMatch[1].trim() : null;
}

function extractAddress(text) {
    // –ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const addressMatch = text.match(/(?:–ú–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞|Address|–ê–¥—Ä–µ—Å)[:\s]*([^\n]{10,200})/i);
    return addressMatch ? addressMatch[1].trim() : null;
}

async function handler(req, res) {
    try {
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
        res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');

        if (req.method === 'OPTIONS') {
            return res.status(200).end();
        }

        if (req.method !== 'POST') {
            res.setHeader('Allow', 'POST, OPTIONS');
            return res.status(405).json({ error: 'Method Not Allowed' });
        }
        const botToken = process.env.TELEGRAM_BOT_TOKEN;
        if (!botToken) {
            throw new Error('TELEGRAM_BOT_TOKEN is not configured');
        }

        const body = typeof req.body === 'string' ? JSON.parse(req.body) : req.body;
        const { action } = body;

        if (action === 'login') {
            const { initData } = body;
            if (!validateTelegramData(initData, botToken)) {
                return res.status(401).json({ error: 'Invalid Telegram data' });
            }
            const urlParams = new URLSearchParams(initData);
            const userData = JSON.parse(decodeURIComponent(urlParams.get('user')));
            const telegramUserId = userData.id;
            const supabaseAdmin = createSupabaseAdmin();
            const { data: client, error } = await supabaseAdmin
                .from('clients')
                .select('*')
                .eq('extra->telegram_user_id', telegramUserId)
                .single();
            if (error || !client) {
                return res.status(404).json({ error: 'User not found. Please register first.' });
            }
            return res.status(200).json({
                success: true,
                user: {
                    id: client.id,
                    name: client.name,
                    phone: client.phone,
                    city: client.city,
                    balance_rub: client.balance_rub,
                    verification_status: client.extra?.verification_status
                }
            });
        } else if (action === 'bot-register') {
            const { userId: telegram_user_id, formData } = req.body;
            // –£–±–∏—Ä–∞–µ–º recognized_data, —Ç–∞–∫ –∫–∞–∫ –º—ã –µ–≥–æ –ø–æ–ª—É—á–∏–º —Å–∞–º–∏
            const { name, phone, video_note_storage_path, ...otherData } = formData;

            if (!name || !phone || !video_note_storage_path || !telegram_user_id) {
                return res.status(400).json({ error: 'Missing required registration data from bot.' });
            }

            const supabaseAdmin = createSupabaseAdmin();

            // +++ –õ–û–ì–ò–ö–ê –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø +++
            // 1. –°–æ–±–∏—Ä–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º-–∫–∞—Ä—Ç–∏–Ω–∫–∞–º
            const imagePathsToRecognize = Object.keys(otherData)
                .filter(key => key.endsWith('_storage_path') && key !== 'video_note_storage_path')
                .map(key => otherData[key]);

            // 2. –í—ã–∑—ã–≤–∞–µ–º Gemini OCR
            let recognized_data = {};
            if (imagePathsToRecognize.length > 0) {
                try {
                    console.log(`Starting Gemini OCR for user ${telegram_user_id} with files:`, imagePathsToRecognize);
                    recognized_data = await recognizeDocumentsWithGemini(
                        supabaseAdmin,
                        imagePathsToRecognize,
                        otherData.citizenship || 'ru'
                    );
                    console.log(`Gemini OCR result for user ${telegram_user_id}:`, recognized_data);
                } catch (e) {
                    console.error("Gemini OCR failed:", e);
                    recognized_data = { error: `Recognition failed: ${e.message}` };
                }
            }

            const extra = {
                ...otherData,
                telegram_user_id: telegram_user_id,
                // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                video_selfie_storage_path: video_note_storage_path,
            };

            const { data: clientData, error: clientError } = await supabaseAdmin
                .from("clients")
                .insert([{
                    name,
                    phone,
                    city: otherData.city,
                    extra,
                    verification_status: 'needs_confirmation',
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    recognized_passport_data: recognized_data,
                    telegram_user_id: telegram_user_id // <--- FIX: Save to main column too
                }])
                .select()
                .single();

            if (clientError) {
                if (clientError.message.includes('duplicate key')) {
                    return res.status(409).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –∏–ª–∏ Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç." });
                }
                throw clientError;
            }

            return res.status(200).json({
                success: true,
                client: clientData,
                message: '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.'
            });
        } else { // Default to webapp-register
            const { initData, formData } = body;
            if (!validateTelegramData(initData, botToken)) {
                return res.status(401).json({ error: 'Invalid Telegram data' });
            }
            const urlParams = new URLSearchParams(initData);
            const userData = JSON.parse(decodeURIComponent(urlParams.get('user')));
            const userId = userData.id;
            const supabaseAdmin = createSupabaseAdmin();
            const {
                name, phone, city, citizenship, emergency_contact_phone,
                recognized_data, inn, has_no_registration_stamp, migrant_info,
                file_ids = []
            } = formData || {};
            let normalizedFileIds = [];
            if (Array.isArray(file_ids)) {
                normalizedFileIds = file_ids.filter((item) => item && item.file_id && item.field);
            } else if (typeof file_ids === 'string' && file_ids.trim()) {
                try {
                    const parsed = JSON.parse(file_ids);
                    if (Array.isArray(parsed)) {
                        normalizedFileIds = parsed.filter((item) => item && item.file_id && item.field);
                    }
                } catch (err) {
                    console.warn('Failed to parse file_ids string:', err);
                }
            }
            if (!name || !phone || !city) {
                return res.status(400).json({ error: 'Name, phone, and city are required.' });
            }
            const migrantInfo = (() => {
                if (!migrant_info) return {};
                if (typeof migrant_info === 'string') {
                    try {
                        return JSON.parse(migrant_info) || {};
                    } catch {
                        return {};
                    }
                }
                if (typeof migrant_info === 'object') {
                    return migrant_info;
                }
                return {};
            })();
            const extra = {
                citizenship: citizenship || '',
                emergency_contact_phone: emergency_contact_phone || '',
                migrant_info: migrantInfo,
                telegram_user_id: userId,
                verification_status: normalizedFileIds.length > 0 ? 'pending_ocr' : 'approved'
            };
            if (citizenship === 'ru') {
                extra.inn = inn || '';
                extra.has_no_registration_stamp = has_no_registration_stamp === 'true';
            } else {
                extra.inn = inn || '';
            }
            const { data: clientData, error: clientError } = await supabaseAdmin
                .from("clients")
                .insert([{ name, phone, city, extra }])
                .select()
                .single();
            if (clientError) {
                if (clientError.message.includes('duplicate key value violates unique constraint "clients_phone_key"')) {
                    return res.status(409).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω." });
                }
                throw clientError;
            }
            const newUserId = clientData.id;
            if (normalizedFileIds.length > 0) {
                triggerOCRProcessing(newUserId, normalizedFileIds);
            }
            return res.status(200).json({
                success: true,
                client: clientData,
                message: normalizedFileIds.length > 0
                    ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞. –î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.'
                    : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.'
            });
        }
    } catch (error) {
        console.error('Authentication handler error:', error);
        res.status(500).json({ error: error.message });
    }
}

module.exports = handler;
