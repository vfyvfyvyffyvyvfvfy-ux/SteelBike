import asyncio
import json
import logging
import aiohttp
from aiohttp import web
from typing import Union
import base64
from pathlib import Path
from PIL import Image
import io

from aiogram import Bot, Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, WebAppInfo,
    FSInputFile
)
from supabase import create_client, Client
from ocr import configure_gemini, recognize_document, recognize_document_from_images

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

import os
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8126548981:AAGC86ZaJ0SYLICC0WbpS7aGOhU9t8iz_a4')
WEBAPP_REGISTER_API = 'https://steel-bike.vercel.app/api/telegram-register'
BOT_REGISTER_API = 'https://steel-bike.vercel.app/api/auth'
ADMIN_SECRET_KEY = 'your_super_secret_admin_key' # –°–µ–∫—Ä–µ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∫–∏
WEB_APP_URL = 'https://steel-bike.vercel.app/' # URL –≤–∞—à–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# --- –í–û–¢ –≠–¢–û–¢ –ù–û–í–´–ô –ë–õ–û–ö ---
# –î–æ–±–∞–≤—å —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
ADMIN_IDS = [752012766]  # <--- –ó–ê–ú–ï–ù–ò –ù–ê –†–ï–ê–õ–¨–ù–´–ï ID –ê–î–ú–ò–ù–û–í
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

# Supabase settings
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_SERVICE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
GEMINI_API_KEY = os.getenv('GOOGLE_API_KEY')
if not GEMINI_API_KEY:
    logger.critical("!!! –ö–ª—é—á GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª –∏ –µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ.")
else:
    logger.info("–ö–ª—é—á Gemini API —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

if not SUPABASE_URL or not SUPABASE_SERVICE_KEY:
    logger.critical("SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY must be set!")
    # In production, exit here

supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
logger.info("Supabase client initialized.")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Aiogram ---
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
class Reg(StatesGroup):
    agreement = State()      # –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –°–û–ì–õ–ê–°–ò–Ø
    phone = State()
    name = State()
    birth_date = State()
    city = State()
    country = State()
    other_country = State()
    passport_main = State()
    passport_reg = State()
    # inn = State()          # –£–ë–†–ê–õ–ò –°–û–°–¢–û–Ø–ù–ò–ï –ò–ù–ù
    patent_front = State()
    patent_back = State()
    patent_receipt = State()
    driver_license = State()
    emergency_phone = State()
    video_note = State()

async def upload_file_to_supabase(file_id: str, user_id: int, key: str) -> str:
    """Download file from Telegram and upload to Supabase Storage"""
    try:
        # Get file info
        file_info = await bot.get_file(file_id)
        # Download file
        file_bytes = await bot.download_file(file_info.file_path)
        # Upload to Supabase
        storage_path = f"{user_id}/{key}.jpg"
        response = supabase.storage.from_("passports").upload(
            path=storage_path,
            file=file_bytes,
            file_options={"content-type": "image/jpeg", "upsert": "true"}
        )
        logger.info(f"Uploaded {storage_path} to Supabase")
        return storage_path
    except Exception as e:
        logger.error(f"Failed to upload {key} for user {user_id}: {e}")
        return None

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_phone_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_city_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üèôÔ∏è –ú–æ—Å–∫–≤–∞", callback_data="city_msk")
        ],
        [
            InlineKeyboardButton(text="üèôÔ∏è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data="city_spb")
        ]
    ])

def get_country_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è", callback_data="country_ru")],
        [InlineKeyboardButton(text="üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data="country_kz")],
        [InlineKeyboardButton(text="üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω", callback_data="country_kg")],
        [InlineKeyboardButton(text="üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", callback_data="country_uz")],
        [InlineKeyboardButton(text="üáπüáØ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω", callback_data="country_tj")],
        [InlineKeyboardButton(text="üåç –î—Ä—É–≥–æ–µ", callback_data="country_other")]
    ])

def get_skip_keyboard(text: str = "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å") -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=text, callback_data="skip")]
    ])

# --- –í–û–¢ –≠–¢–ê –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
async def notify_admins_about_new_user(user_name: str, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    if not ADMIN_IDS:
        logger.warning("–°–ø–∏—Å–æ–∫ ADMIN_IDS –ø—É—Å—Ç, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return

    text = (
        f"üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!*\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *{user_name}*\n"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{user_id}`\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–∫–µ—Ç—É –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )

    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", url=f"{WEB_APP_URL}/admin.html")]
    ])

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=text,
                parse_mode='Markdown',
                reply_markup=admin_keyboard
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò ---

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ ---
# –§—É–Ω–∫—Ü–∏—è go_to_inn —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞

async def go_to_driver(msg: Union[Message, CallbackQuery], state: FSMContext):
    text = "üöó *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):* –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è."
    keyboard = get_skip_keyboard("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    if isinstance(msg, CallbackQuery):
        await msg.message.edit_text(text + "\n\n_–ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ._", parse_mode='Markdown', reply_markup=keyboard)
    else:
        await msg.answer(text + "\n\n_–ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ._", parse_mode='Markdown', reply_markup=keyboard)
    await state.set_state(Reg.driver_license)

async def go_to_emergency(msg: Union[Message, CallbackQuery], state: FSMContext):
    text = "üìû *–¢–µ–ª–µ—Ñ–æ–Ω —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞:*\n_–ü—Ä–∏–º–µ—Ä: +7 (999) 123-45-67_"
    if isinstance(msg, CallbackQuery):
        await msg.message.edit_text(text, parse_mode='Markdown')
    else:
        await msg.answer(text, parse_mode='Markdown')
    await state.set_state(Reg.emergency_phone)

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –ë–æ—Ç–∞ ---

@dp.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    args = message.text.split()[1] if len(message.text.split()) > 1 else None

    if args == 'register':
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Ñ–∞–π–ª–æ–≤
            agreement_file = FSInputFile('soglashenie.docx')
            appendix_file = FSInputFile('prilozhenie.docx')

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–≥–ª–∞—Å–∏—è
            agreement_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω –∏ –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è", callback_data="agree_and_continue")]
            ])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await message.answer_document(agreement_file)
            await message.answer_document(
                appendix_file,
                caption=(
                    "üìÑ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –≤—ã—à–µ.*\n\n"
                    "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–Ø —Å–æ–≥–ª–∞—Å–µ–Ω¬ª, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é "
                    "–ø—Ä–æ—á–∏—Ç–∞–ª–∏, –ø–æ–Ω—è–ª–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è "
                    "–∏ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫ –Ω–µ–º—É. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–º–µ–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Å–∏–ª—É –∏ "
                    "–ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è –∫ –≤–∞—à–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Ä—É—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏."
                ),
                parse_mode='Markdown',
                reply_markup=agreement_kb
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è
            await state.set_state(Reg.agreement)
        except FileNotFoundError:
            logger.error("–§–∞–π–ª—ã —Å–æ–≥–ª–∞—à–µ–Ω–∏–π (soglashenie.docx, prilozhenie.docx) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEB_APP_URL))]
    ])
    await message.answer(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{message.from_user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!*\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *PRIZMATIC* ‚Äî —Å–µ—Ä–≤–∏—Å –∞—Ä–µ–Ω–¥—ã —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤.\n\n"
        "üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º.",
        parse_mode='Markdown',
        reply_markup=keyboard
    )

@dp.callback_query(Reg.agreement, F.data == "agree_and_continue")
async def process_agreement(callback: CallbackQuery, state: FSMContext):
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    await callback.message.edit_reply_markup(reply_markup=None)
    # –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await callback.message.answer(
        "üöÄ *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!* –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
        "–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
        "üì± *–®–∞–≥ 1:* –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
        parse_mode='Markdown',
        reply_markup=get_phone_keyboard()
    )
    await state.set_state(Reg.phone)
    await callback.answer()

@dp.message(Reg.agreement)
async def agreement_fallback(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω' –ø–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –≤—ã—à–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")


@dp.message(Reg.phone, F.contact)
async def process_phone(message: types.Message, state: FSMContext):
    if message.contact.user_id != message.from_user.id:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.", reply_markup=get_phone_keyboard())
        return

    await state.update_data(phone=message.contact.phone_number, telegram_user_id=message.from_user.id)
    await message.answer(
        "‚úÖ *–û—Ç–ª–∏—á–Ω–æ! –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω.*\n\n"
        "üìù *–®–∞–≥ 2:* –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û), –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ.\n"
        "_–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á_",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Reg.name)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–æ `process_passport_reg` –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

@dp.message(Reg.phone)
async def process_phone_invalid(message: Message):
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.\n\n"
        "_–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞._",
        parse_mode='Markdown',
        reply_markup=get_phone_keyboard()
    )

@dp.message(Reg.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer(
        "üë§ *–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!*\n\n"
        "üìÖ *–®–∞–≥ 3:* –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì).\n"
        "_–ü—Ä–∏–º–µ—Ä: 15.05.1990_",
        parse_mode='Markdown'
    )
    await state.set_state(Reg.birth_date)

@dp.message(Reg.birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    import re
    from datetime import datetime

    date_str = message.text.strip()
    if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', date_str):
        await message.answer(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "_–ü—Ä–∏–º–µ—Ä: 15.05.1990_",
            parse_mode='Markdown'
        )
        return

    try:
        birth_date = datetime.strptime(date_str, '%d.%m.%Y')
        today = datetime.now()
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))

        if age < 18:
            await message.answer(
                "‚ùå *–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 18+ –ª–µ—Ç*\n\n"
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='Markdown'
            )
            await state.clear()
            return

        await state.update_data(birth_date=date_str)
        await message.answer(
            f"üìÖ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*\n"
            f"_–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç_\n\n"
            "üèôÔ∏è *–®–∞–≥ 4:* –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–∞–±–æ—Ç—ã.",
            parse_mode='Markdown',
            reply_markup=get_city_keyboard()
        )
        await state.set_state(Reg.city)
    except ValueError:
        await message.answer(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞*\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
            "_–ü—Ä–∏–º–µ—Ä: 15.05.1990_",
            parse_mode='Markdown'
        )

@dp.callback_query(Reg.city, F.data.startswith("city_"))
async def process_city_callback(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    if data == "city_msk":
        city = "–ú–æ—Å–∫–≤–∞"
    elif data == "city_spb":
        city = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    await state.update_data(city=city)
    await callback.message.edit_text(
        f"üèôÔ∏è *–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {city}*\n\n"
        "üåç *–®–∞–≥ 5:* –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞.",
        parse_mode='Markdown',
        reply_markup=get_country_keyboard()
    )
    await state.set_state(Reg.country)
    await callback.answer()

@dp.callback_query(Reg.country, F.data.startswith("country_"))
async def process_country_callback(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    country_map = {
        "country_ru": ("ru", "–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è"),
        "country_kz": ("kz", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"),
        "country_kg": ("kg", "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω"),
        "country_uz": ("uz", "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω"),
        "country_tj": ("tj", "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω"),
        "country_other": ("other", "–î—Ä—É–≥–æ–µ")
    }
    country_info = country_map.get(data)
    if not country_info:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    country_code, country_name = country_info
    await state.update_data(citizenship=country_code)

    if country_code == "other":
        await callback.message.edit_text(
            "üåç *–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã.*\n"
            "_–ü—Ä–∏–º–µ—Ä: –ê—Ä–º–µ–Ω–∏—è_",
            parse_mode='Markdown',
            reply_markup=None
        )
        await state.set_state(Reg.other_country)
        await callback.answer()
        return

    patent_required = country_code in ['uz', 'tj']
    back_optional = country_code != 'ru'
    await state.update_data(
        patent_required=patent_required,
        back_optional=back_optional
    )

    if country_code == 'ru':
        passport_text = "üì∏ *–®–∞–≥ 6:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞.\n_–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —á–µ—Ç–∫–æ–µ –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–∏—Ç–∞–µ–º—ã._"
    else:
        passport_text = "üì∏ *–®–∞–≥ 6:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n_–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞) –∏–ª–∏ ID-–∫–∞—Ä—Ç–∞ (–ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)._"

    await callback.message.edit_text(
        f"üåç *–°—Ç—Ä–∞–Ω–∞: {country_name}*\n\n"
        f"{passport_text}",
        parse_mode='Markdown',
        reply_markup=None
    )
    await state.set_state(Reg.passport_main)
    await callback.answer()

@dp.message(Reg.other_country)
async def process_other_country(message: Message, state: FSMContext):
    country_name = message.text.strip()
    if not country_name:
        await message.answer(
            "‚ùå *–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.*\n"
            "_–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ._",
            parse_mode='Markdown'
        )
        return

    await state.update_data(
        citizenship=country_name,
        patent_required=True,
        back_optional=True
    )

    await message.answer(
        f"üåç *–°—Ç—Ä–∞–Ω–∞: {country_name}*\n\n"
        "üì∏ *–®–∞–≥ 6:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
        "_–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞) –∏–ª–∏ ID-–∫–∞—Ä—Ç–∞ (–ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)._",
        parse_mode='Markdown'
    )
    await state.set_state(Reg.passport_main)

@dp.message(Reg.passport_main, F.photo)
async def process_passport_main(message: Message, state: FSMContext):
    await state.update_data(passport_main_file_id=message.photo[-1].file_id)
    data = await state.get_data()
    country = data.get('citizenship')

    if country == 'ru':
        reg_text = "üì∏ *–®–∞–≥ 7:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.\n_–ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞._"
    else:
        reg_text = "üì∏ *–®–∞–≥ 7:* –ï—Å–ª–∏ —É –≤–∞—Å ID-–∫–∞—Ä—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.\n_–ï—Å–ª–∏ –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ._"

    await message.answer(
        f"üì∑ *–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n{reg_text}",
        parse_mode='Markdown'
    )
    await state.set_state(Reg.passport_reg)

@dp.message(Reg.passport_reg, F.photo)
async def process_passport_reg_photo(message: Message, state: FSMContext):
    await state.update_data(passport_reg_file_id=message.photo[-1].file_id)
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –í–º–µ—Å—Ç–æ go_to_inn ---
    data = await state.get_data()
    patent_required = data.get('patent_required', False)
    if patent_required:
        await message.answer(
            "üìù *–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n"
            "üìÑ *–®–∞–≥ 8:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Ç–µ–Ω—Ç–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É (–ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).\n"
            "_–ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ._",
            parse_mode='Markdown',
            reply_markup=get_skip_keyboard()
        )
        await state.set_state(Reg.patent_front)
    else:
        await go_to_driver(message, state)


@dp.message(Reg.passport_reg)
async def process_passport_reg_text(message: Message, state: FSMContext):
    data = await state.get_data()
    country = data.get('citizenship')
    if country == 'ru':
        await message.answer(
            "‚ùå *–î–ª—è –†–§ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.*\n"
            "_–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ._",
            parse_mode='Markdown'
        )
        return
    # Skip for non-RU
    await state.update_data(passport_reg_file_id=None)
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –í–º–µ—Å—Ç–æ go_to_inn ---
    patent_required = data.get('patent_required', False)
    if patent_required:
        await message.answer(
            "üìù *–ü—Ä–æ–ø—É—â–µ–Ω–æ!*\n\n"
            "üìÑ *–®–∞–≥ 8:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Ç–µ–Ω—Ç–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É (–ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).\n"
            "_–ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ._",
            parse_mode='Markdown',
            reply_markup=get_skip_keyboard()
        )
        await state.set_state(Reg.patent_front)
    else:
        await go_to_driver(message, state)


# --- –•—ç–Ω–¥–ª–µ—Ä process_inn —É–¥–∞–ª–µ–Ω ---

@dp.message(Reg.patent_front, F.photo)
async def process_patent_front(message: Message, state: FSMContext):
    await state.update_data(patent_front_file_id=message.photo[-1].file_id)
    await message.answer(
        "üìÑ *–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n"
        "üìÑ *–®–∞–≥ 9:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Ç–µ–Ω—Ç–∞ (–æ–±–æ—Ä–æ—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).\n"
        "_–ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ._",
        parse_mode='Markdown',
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(Reg.patent_back)

@dp.callback_query(Reg.patent_front, F.data == "skip")
async def skip_patent_front(callback: CallbackQuery, state: FSMContext):
    await state.update_data(patent_front_file_id=None)
    await callback.message.edit_text(
        "üìÑ *–ü—Ä–æ–ø—É—â–µ–Ω–æ!*\n\n",
        parse_mode='Markdown',
        reply_markup=None
    )
    await go_to_driver(callback, state)
    await callback.answer()

@dp.message(Reg.patent_back, F.photo)
async def process_patent_back(message: Message, state: FSMContext):
    await state.update_data(patent_back_file_id=message.photo[-1].file_id)
    await message.answer(
        "üìÑ *–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n"
        "üìÑ *–®–∞–≥ 10:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –ø–∞—Ç–µ–Ω—Ç–∞.\n"
        "_–ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ._",
        parse_mode='Markdown',
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(Reg.patent_receipt)

@dp.callback_query(Reg.patent_back, F.data == "skip")
async def skip_patent_back(callback: CallbackQuery, state: FSMContext):
    await state.update_data(patent_back_file_id=None)
    await callback.message.edit_text(
        "üìÑ *–ü—Ä–æ–ø—É—â–µ–Ω–æ!*\n\n"
        "üìÑ *–®–∞–≥ 10:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –ø–∞—Ç–µ–Ω—Ç–∞.\n"
        "_–ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ._",
        parse_mode='Markdown',
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(Reg.patent_receipt)
    await callback.answer()

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–æ –∫–æ–Ω—Ü–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

@dp.message(Reg.patent_receipt, F.photo)
async def process_patent_receipt(message: Message, state: FSMContext):
    await state.update_data(patent_receipt_file_id=message.photo[-1].file_id)
    await go_to_driver(message, state)

@dp.callback_query(Reg.patent_receipt, F.data == "skip")
async def skip_patent_receipt(callback: CallbackQuery, state: FSMContext):
    await state.update_data(patent_receipt_file_id=None)
    await callback.message.edit_text(
        "üìÑ *–ü—Ä–æ–ø—É—â–µ–Ω–æ!*\n\n",
        parse_mode='Markdown',
        reply_markup=None
    )
    await go_to_driver(callback, state)
    await callback.answer()

@dp.message(Reg.driver_license, F.photo)
async def process_driver_license(message: Message, state: FSMContext):
    await state.update_data(driver_license_file_id=message.photo[-1].file_id)
    await message.answer("üöó *–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n", reply_markup=None)
    await go_to_emergency(message, state)

@dp.callback_query(Reg.driver_license, F.data == "skip")
async def skip_driver_license(callback: CallbackQuery, state: FSMContext):
    await state.update_data(driver_license_file_id=None)
    await callback.message.edit_text(
        "üöó *–ü—Ä–æ–ø—É—â–µ–Ω–æ!*\n\n",
        parse_mode='Markdown',
        reply_markup=None
    )
    await go_to_emergency(callback, state)
    await callback.answer()

@dp.message(Reg.driver_license)
async def fallback_driver(message: Message, state: FSMContext):
    # If text message, treat as skip or ignore
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", reply_markup=get_skip_keyboard())

@dp.message(Reg.emergency_phone)
async def process_emergency_phone(message: Message, state: FSMContext):
    emergency_phone = message.text.strip()
    await state.update_data(emergency_phone=emergency_phone)
    await message.answer(
        "üìû *–¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*\n\n"
        "üé• *–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥:* –ó–∞–ø–∏—à–∏—Ç–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫, –≥–¥–µ –¥–µ—Ä–∂–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç —Ä—è–¥–æ–º —Å –ª–∏—Ü–æ–º.\n"
        "_–≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞._",
        parse_mode='Markdown'
    )
    await state.set_state(Reg.video_note)

@dp.message(Reg.video_note, F.video_note)
async def process_video_note(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤–∏–¥–µ–æ
    await state.update_data(video_note_file_id=message.video_note.file_id)
    user_data = await state.get_data()
    user_id = user_data.get('telegram_user_id')

    await message.answer(
        "üéâ *–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n"
        "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.",
        parse_mode='Markdown'
    )

    try:
        # --- –®–ê–ì 1: –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ file_id (–∏ —Ñ–æ—Ç–æ, –∏ –≤–∏–¥–µ–æ) ---
        file_ids_to_upload = {
            key.replace('_file_id', ''): user_data[key]
            for key in user_data if key.endswith('_file_id') and user_data[key]
        }

        images_for_gemini = []

        # --- –®–ê–ì 2: –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –û–î–ò–ù –†–ê–ó –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –≤ Storage ---
        for key, file_id in file_ids_to_upload.items():
            try:
                file_info = await bot.get_file(file_id)
                file_bytes_io = await bot.download_file(file_info.file_path)
                file_bytes = file_bytes_io.read() # –ß–∏—Ç–∞–µ–º –±–∞–π—Ç—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if key == 'video_note':
                    content_type = 'video/mp4'
                else:
                    content_type = 'image/jpeg'

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –õ–Æ–ë–û–ô —Ñ–∞–π–ª –≤ Supabase Storage
                storage_path = f"{user_id}/{key}.{content_type.split('/')[1]}" # e.g., .../passport_main.jpeg or .../video_note.mp4
                supabase.storage.from_("passports").upload(
                    path=storage_path,
                    file=file_bytes,
                    file_options={"content-type": content_type, "upsert": "true"}
                )

                # –ó–∞–º–µ–Ω—è–µ–º file_id –Ω–∞ –ø—É—Ç—å –≤ Storage –ø—Ä—è–º–æ –≤ user_data
                user_data[key + '_storage_path'] = storage_path
                del user_data[key + '_file_id'] # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á —Å file_id

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {key}: {e}")
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏—Ç—ã–π —Ñ–∞–π–ª –∏ –∏–¥–µ–º –¥–∞–ª—å—à–µ

        # --- –®–ê–ì 3: –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ---
        await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –û—Ç–ø—Ä–∞–≤–ª—è—é –∞–Ω–∫–µ—Ç—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏
        user_data.pop('patent_required', None)
        user_data.pop('back_optional', None)
        # –£–¥–∞–ª—è–µ–º –ò–ù–ù, –µ—Å–ª–∏ –æ–Ω –≤–¥—Ä—É–≥ –≥–¥–µ-—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        user_data.pop('inn', None)

        api_data = {
            "action": "bot-register",
            "userId": user_id,
            "formData": user_data # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ, —á—Ç–æ —Å–æ–±—Ä–∞–ª–∏
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(BOT_REGISTER_API, json=api_data) as response:
                if response.status != 200:
                    response_text = await response.text()
                    logger.error(f"API returned status {response.status}: {response_text}")
                    raise Exception(f"API returned status {response.status}")

                result = await response.json()
                if result.get('success'):

                    # --- –í–û–¢ –≠–¢–£ –°–¢–†–û–ß–ö–£ –ù–£–ñ–ù–û –î–û–ë–ê–í–ò–¢–¨ ---
                    await notify_admins_about_new_user(user_name=user_data.get('name'), user_id=user_id)
                    # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---

                    await message.answer(
                        "‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                        "üéä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
                        "üì± –í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∑–∞–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏, –¥–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è), –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç—É, –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞.\n\n"
                        "_–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∫ PRIZMATIC!_",
                        parse_mode='Markdown'
                    )
                    # Send video with app button
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEB_APP_URL))]
                    ])
                    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª IMG_7164.MP4 –ª–µ–∂–∏—Ç –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
                    try:
                        video_for_send = FSInputFile('IMG_7164.MP4')
                        await message.answer_video(
                            video=video_for_send,
                            caption="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º!",
                            reply_markup=keyboard
                        )
                    except FileNotFoundError:
                        logger.warning("–§–∞–π–ª —Å –≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π (IMG_7164.MP4) –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
                        await message.answer("üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.", reply_markup=keyboard)

                else:
                    await message.answer(
                        f"‚ùå *–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏*\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        parse_mode='Markdown'
                    )
    except Exception as e:
        logger.error("Final registration API call failed: %s", e)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ ---
@dp.message()
async def any_message_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ FSM
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ {message.content_type} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")


# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∫–∏ ---
async def notify_handler(request: web.Request):
    if request.headers.get('Authorization') != f'Bearer {ADMIN_SECRET_KEY}':
        return web.Response(status=401, text='Unauthorized')
    
    try:
        data = await request.json()
        user_id = data.get('user_id')
        text = data.get('text')
        if not user_id or not text:
            return web.json_response({'error': 'user_id and text are required'}, status=400)
        
        await bot.send_message(chat_id=user_id, text=text)
        return web.json_response({'success': True})
    except Exception as e:
        logger.error("Notify handler error: %s", e)
        return web.json_response({'error': 'Failed to send message'}, status=500)

async def start_http_server():
    app = web.Application()
    app.router.add_post('/notify', notify_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    logger.info("HTTP server for notifications started on port 8080")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Gemini –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    if GEMINI_API_KEY:
        configure_gemini(GEMINI_API_KEY)
    else:
        logger.error("–ö–ª—é—á GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –±–æ—Ç–æ–º
    http_server_task = asyncio.create_task(start_http_server())

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")