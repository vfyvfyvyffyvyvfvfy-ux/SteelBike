
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bike App</title>
    <link rel="stylesheet" href="style.css?v=7.4">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preconnect" href="https://briulxpnjxlsgfgkqvfh.supabase.co" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="icon" href="data:;base64,iVBORw0KGgo=">
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.41.0/dist/umd/supabase.min.js"></script>
    <script src="https://telegram.org/js/telegram-web-app.js?59"></script>
    <script src="transitions.js" defer></script>

</head>
<body>
<script>
    // Функция инициализации Telegram WebApp
    async function initializeTelegramAuth() {
        // Даем время на загрузку Telegram WebApp API
        let attempts = 0;
        const maxAttempts = 50; // 5 секунд максимум

        while (attempts < maxAttempts) {
            if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initData) {
                console.log('Telegram WebApp detected!');
                break;
            }
            await new Promise(resolve => setTimeout(resolve, 100));
            attempts++;
        }

        const isInTelegram = window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initData;
        const userId = localStorage.getItem('userId');


        // Скрываем основной экран заранее, если нужно авторизоваться
        const appScreen = document.querySelector('.app-screen');
        if (appScreen) appScreen.style.display = 'none';

        if (isInTelegram && !userId) {
            // Show loading screen with background to cover everything
            const loadingHTML = `
                <div class="app-screen loading-container" style="display: flex; text-align: center; justify-content: center; align-items: center; height: 100vh; width: 100vw; position: fixed; top: 0; left: 0; background: white; z-index: 1000;">
                    <div class="app-content" style="justify-content: center;">
                        <header class="app-header"><h1>SteelBike</h1></header>
                        <main class="app-main">
                            <h2>Авторизация...</h2>
                            <p style="color: var(--text-secondary); margin: 20px 0;">Проверяем ваши данные в Telegram.</p>
                            <div class="loading-spinner" style="border: 4px solid #f3f3f3; border-top: 4px solid #3498db; border-radius: 50%; width: 40px; height: 40px; animation: spin 2s linear infinite; margin: 20px auto;"></div>
                        </main>
                    </div>
                </div>
                <style>@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }</style>`;
            document.body.insertAdjacentHTML('afterbegin', loadingHTML);

            try {
                const tg = window.Telegram.WebApp;

                // Важно: расширяем WebApp для полного экрана
                tg.expand();

                const initData = tg.initData;
                console.log('Sending initData to server:', initData ? 'Data present' : 'No data');

                const response = await fetch('/api/auth', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        action: 'login',
                        initData: initData || '',
                        platform: tg.platform || 'unknown'
                    })
                });

                console.log('Fetch status:', response.status, response.ok);
                const data = await response.json();
                console.log('Server response:', data);

                if (response.ok && data.success) {
                    // Login successful
                    localStorage.setItem('userId', data.user.id);
                    localStorage.setItem('userName', data.user.name);
                    localStorage.setItem('isRegistered', 'true');
                    // Reload to load the app
                    window.location.reload();
                } else {
                    // Login failed, show styled message and redirect to bot for registration
                    const messageDiv = document.createElement('div');
                    messageDiv.className = 'app-screen';
                    messageDiv.style.display = 'flex';
                    messageDiv.style.position = 'fixed';
                    messageDiv.style.top = '0';
                    messageDiv.style.left = '0';
                    messageDiv.style.width = '100vw';
                    messageDiv.style.height = '100vh';
                    messageDiv.style.zIndex = '10000';
                    messageDiv.innerHTML = `
                        <div class="app-content" style="justify-content: center;">
                            <header class="app-header"><h1>Bike App</h1></header>
                            <main class="app-main" style="text-align: center;">
                                <h2>Вы не зарегистрированы</h2>
                                <p style="color: var(--text-secondary); margin: 20px 0;">Пройдите пожалуйста быструю регистрацию и вам откроется доступ к приложению.</p>
                                <button class="btn btn-primary" id="redirect-btn">Зарегистрироваться</button>
                            </main>
                        </div>
                    `;
                    document.body.appendChild(messageDiv);

                    // Auto redirect after 5 seconds or on button click
                    const redirect = () => {
                        messageDiv.remove();
                        const botUsername = 'steelbikebot';
                        const registrationLink = `https://t.me/${botUsername}?start=register`;
                        tg.openTelegramLink(registrationLink);
                    };

                    document.getElementById('redirect-btn').addEventListener('click', redirect);
                    setTimeout(redirect, 5000);
                }
            } catch (error) {
                console.error('Login error:', error);
                // Show error and registration option
                document.querySelector('.loading-container').innerHTML = `
                    <div class="app-content" style="justify-content: center;">
                        <header class="app-header"><h1>Bike App</h1></header>
                        <main class="app-main">
                            <h2>Ошибка авторизации</h2>
                            <p style="color: var(--text-secondary); margin: 20px 0;">Попробуйте зарегистрироваться.</p>
                            <p id="countdown" style="color: var(--text-secondary); margin: 10px 0;">Перенаправление через 5 секунд...</p>
                            <button id="redirect-to-bot-btn" class="btn btn-primary">Зарегистрироваться</button>
                        </main>
                    </div>`;

                    // Add countdown for error screen too
                    let countdown = 5;
                    const countdownEl = document.getElementById('countdown');
                    const interval = setInterval(() => {
                        countdown--;
                        if (countdownEl) countdownEl.textContent = `Перенаправление через ${countdown} секунд...`;
                        if (countdown <= 0) {
                            clearInterval(interval);
                            const tg = window.Telegram.WebApp;
                            tg.sendData(JSON.stringify({ type: 'request_registration' }));
                            tg.close();
                        }
                    }, 1000);

                    // Button click
                    const btn = document.getElementById('redirect-to-bot-btn');
                    btn.addEventListener('click', () => {
                        clearInterval(interval);
                        const tg = window.Telegram.WebApp;
                        tg.sendData(JSON.stringify({ type: 'request_registration' }));
                        tg.close();
                    });
            }
        } else {
            // For browser or already logged in users
            console.log('Not in Telegram or already logged in');
            const appScreen = document.querySelector('.app-screen');
            if (appScreen) appScreen.style.display = 'flex';
        }
    }

    // Запускаем инициализацию при загрузке страницы
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeTelegramAuth);
    } else {
        // DOMContentLoaded уже произошел
        initializeTelegramAuth();
    }
</script>

<div class="app-screen">
    <div class="app-content">
        <header class="app-header">
            <h1></h1>
        </header>
        <main class="app-main">
            <div class="bike-image-wrapper">
                <img src="bike-delivery.png" alt="Electric bike" class="bike-image" id="main-bike-image" width="1536" height="1024" decoding="async" fetchpriority="high">
                <div id="bike-label" class="bike-label"></div>
            </div>
            <div class="progress-section">
                <div class="progress-bar-container">
                    <div class="progress-bar" id="progress-bar-fill"></div>
                </div>
                <div class="progress-labels">
                    <span id="progress-start-label"></span>
                    <span id="progress-end-label"></span>
                </div>
            </div>
            <h2></h2>
            <div class="info-cards">
                <div class="card">
                    <div class="icon-wrapper">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>
                    </div>
                    <div class="text-content">
                        <span></span>
                        <strong id="available-bikes-count"></strong>
                    </div>
                </div>
                <div class="card" id="balance-card">
                    <div class="icon-wrapper dollar">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="1" x2="12" y2="23"/><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/></svg>
                    </div>
                    <div class="text-content">
                        <span></span>
                        <strong id="balance-amount"></strong>
                    </div>
                </div>
            </div>
            <div class="action-buttons">
                <button class="btn btn-primary" id="scan-qr-btn"></button>
                <div class="secondary-actions">
                    <button class="btn btn-secondary" id="scan-icon-btn"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 7V5a2 2 0 0 1 2-2h2"/><path d="M17 3h2a2 2 0 0 1 2 2v2"/><path d="M21 17v2a2 2 0 0 1-2 2h-2"/><path d="M7 21H5a2 2 0 0 1-2-2v-2"/></svg></button>
                    <button class="btn btn-secondary text-btn" id="id-input-btn"></button>
                    <button class="btn btn-secondary text-btn" id="extend-row-btn"></button>
                    <button class="btn btn-secondary text-btn" id="booking-btn"></button>
                </div>
            </div>
            <div id="extend-container" class="hidden extend-container">
                <button id="extend-rental-btn" class="btn btn-primary"></button>
            </div>
        </main>
    </div>
        <nav class="bottom-nav">
        <a href="index.html" class="nav-item active"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9 22 9 12 15 12 15 22"/></svg></a>
        <a href="stats.html" class="nav-item"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="20" x2="12" y2="10"/><line x1="18" y1="20" x2="18" y2="4"/><line x1="6" y1="20" x2="6" y2="16"/></svg></a>
        <a href="map.html" class="nav-item"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"/><circle cx="12" cy="10" r="3"/></svg></a>
        <a href="profile.html" class="nav-item"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg></a>
    </nav>
</div>
<div id="qr-modal" class="modal-overlay hidden">
    <div class="modal-content">
        <button class="modal-close" id="qr-modal-close-btn">&times;</button>
        <h2>Вы арендуете<br>Электровелосипед #00001</h2>
        <div class="bike-specs">
            <div class="spec-item"><span class="spec-label">Максималка:</span><span class="spec-value">25 км/ч</span></div>
            <div class="spec-item"><span class="spec-label">Пробег:</span><span class="spec-value">до 40 км</span></div>
            <div class="spec-item"><span class="spec-label">Мощность:</span><span class="spec-value">240 Вт</span></div>
            <div class="spec-item"><span class="spec-label">Батарея:</span><span class="spec-value">60В/20Ah</span></div>
            <div class="spec-item"><span class="spec-label">Зарядка:</span><span class="spec-value">6 ч</span></div>
            <div class="spec-item"><span class="spec-label">Привод:</span><span class="spec-value">задний</span></div>
            <div class="spec-item"><span class="spec-label">Тормоза:</span><span class="spec-value">гидравлика</span></div>
        </div>
        <div class="modal-info">
            <span>Цена: <strong id="tariff-price">3750 ₽</strong></span>
            <span>Срок: <strong id="tariff-duration">7 дней</strong></span>
        </div>
        <p id="tariff-description" style="margin: 10px 0; font-size: 0.9rem; color: var(--text-secondary);"></p>
        <p class="disclaimer-text">Оплачивая, вы соглашаетесь с условиями сервиса и автоплатежами.</p>
        <button class="btn btn-primary" id="rent-btn" data-action="rent">Арендовать</button>
    </div>
</div>
<div id="topup-modal" class="modal-overlay hidden">
    <div class="modal-content">
        <button class="modal-close" id="topup-modal-close-btn">&times;</button>
        <h2>Пополнение баланса</h2>
        <div class="modal-form-group">
            <label for="amount-input" style="text-align: center;">Сумма пополнения</label>
            <input type="number" id="amount-input" placeholder="Введите сумму в ₽">
        </div>
        <button class="btn btn-primary" id="pay-sbp-btn">Пополнить</button>
    </div>
</div>
<div id="id-input-modal" class="modal-overlay hidden">
    <div class="modal-content">
        <button class="modal-close" id="id-input-modal-close-btn">&times;</button>
        <h2>Ввести ID велосипеда</h2>
        <div class="modal-form-group">
            <label for="bike-id-input">ID велосипеда</label>
            <input type="text" id="bike-id-input" placeholder="Например: 00001">
        </div>
        <button class="btn btn-primary" id="confirm-id-btn">Найти и арендовать</button>
    </div>ф
</div>
<div id="booking-list-modal" class="modal-overlay hidden">
    <div class="modal-content">
        <button class="modal-close" id="booking-list-modal-close-btn">&times;</button>
        <h2>Выберите велосипед для брони</h2>
        <div class="bike-list">
            <div class="bike-list-item" data-bike-id="00001"><strong>Электровелосипед #00001</strong><span>300 м</span></div>
            <div class="bike-list-item" data-bike-id="00002"><strong>Электровелосипед #00002</strong><span>850 м</span></div>
            <div class="bike-list-item" data-bike-id="00003"><strong>Электровелосипед #00003</strong><span>1.1 км</span></div>
            <div class="bike-list-item" data-bike-id="00004"><strong>Электровелосипед #00004</strong><span>2.4 км</span></div>
            <div class="bike-list-item" data-bike-id="00005"><strong>Электровелосипед #00005</strong><span>4.0 км</span></div>
        </div>
    </div>
</div>
<div id="tariff-modal" class="modal-overlay hidden">
    <div class="modal-content">
        <button class="modal-close" id="tariff-modal-close-btn">&times;</button>
        <h2>Тарифы</h2>
        <div class="bike-list">
            <div class="bike-list-item tariff-option" data-tariff="bronze"><strong>Бронза</strong><span>1000 ₽ / 3 дня</span></div>
            <div class="bike-list-item tariff-option" data-tariff="silver"><strong>Серебро</strong><span>2000 ₽ / 5 дней</span></div>
            <div class="bike-list-item tariff-option" data-tariff="gold"><strong>Золото</strong><span>3750 ₽ / 7 дней</span></div>
        </div>
        <p class="disclaimer-text">Оплачивая, вы соглашаетесь с условиями сервиса и автоплатежами.</p>
    </div>
</div>
<div id="tariff-detail-modal" class="modal-overlay hidden">
    <div class="modal-content">
        <button class="modal-close" id="tariff-detail-close-btn">&times;</button>
        <h2 id="tariff-detail-title"></h2>
        <p id="tariff-detail-description" class="tariff-description"></p>

        <!-- Новый блок для выбора вариантов -->
        <div class="tariff-options-list" id="tariff-options-list">
            <!-- Сюда JavaScript будет вставлять варианты -->
        </div>

        <button class="btn btn-primary" id="select-tariff-btn">Выбрать тариф</button>
    </div>
</div>
<div id="extend-modal" class="modal-overlay hidden">
    <div class="modal-content">
        <button class="modal-close" id="extend-close-btn">&times;</button>
        <h2>Продлить аренду</h2>
        <ul id="extend-options" class="extend-options-list"></ul>
        <div class="modal-actions" style="display:flex;gap:10px;margin-top:20px;">
            <button type="button" id="extend-cancel-btn" class="btn btn-secondary" style="flex:1;">Отмена</button>
            <button type="button" id="extend-select-btn" class="btn btn-primary" style="flex:1;">Продлить</button>
        </div>
    </div>
</div>
<div id="notification-toast" class="toast-container hidden"><p class="toast-message">На вашем счету недостаточно средств.</p></div>
<div id="success-toast" class="toast-container toast-success hidden"><p class="toast-message">Баланс пополнен на <strong id="success-amount"></strong>!</p></div>
<div id="rent-success-toast" class="toast-container toast-success hidden"><p class="toast-message">Аренда успешно оформлена! Подойдите к администратору для получения электровелосипеда.</p></div>
<div id="booking-success-toast" class="toast-container toast-success hidden"><p class="toast-message">Велосипед забронирован на 1 час!</p></div>
        

        <div id="main-menu-overlay" class="menu-overlay hidden" role="dialog" aria-modal="true" style="display:none;">
            <div class="menu-container">
            </div>
        </div>

    <script>
    const SUPABASE_URL = 'https://briulxpnjxlsgfgkqvfh.supabase.co';
    const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJyaXVseHBuanhsc2dmZ2txdmZoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxNzUwNzEsImV4cCI6MjA3NDc1MTA3MX0.Zj-V22HQ2MlZJToC4ZzBcfqPtAVI8NAjb7TQMiJQU60';
    const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    const CURRENCY_SYMBOL = '₽';
    let userBalance = 0;
    let currentRentalForExtension = null;
    const formatBalance = (value) => {
        const numeric = Number(value);
        if (!Number.isFinite(numeric)) {
            return `... ${CURRENCY_SYMBOL}`;
        }
        return `${Math.round(numeric)} ${CURRENCY_SYMBOL}`;
    };
    const updateBalanceDisplays = (value) => {
        if (typeof value === 'number' && !Number.isNaN(value)) {
            userBalance = value;
        }
        const textValue = formatBalance(userBalance);
        document.querySelectorAll('#balance-amount, .balance-amount').forEach((el) => {
            el.textContent = textValue;
        });
    };

    function toggleButtonLoading(btn, isLoading, textIdle, textBusy) {
        if (!btn) return;
        btn.disabled = !!isLoading;
        btn.textContent = isLoading ? textBusy : textIdle;
    }


async function initializeRentalSystem() {
    const mainContent = document.querySelector('.app-main');
    const appHeader = document.querySelector('.app-header h1');
    let currentUser = null;
    let activeRental = null;
    const renderDefaultView = () => {
        mainContent.innerHTML = `
            <div class="bike-image-wrapper">
                <img src="bike-delivery.png" alt="Electric bike" class="bike-image" id="main-bike-image">
            </div>
            <div class="progress-section">
                <div class="progress-bar-container"><div class="progress-bar" id="progress-bar-fill"></div></div>
                <div class="progress-labels"><span id="progress-start-label">0 дней</span><span id="progress-end-label">...</span></div>
            </div>
            <h2>Найти и арендовать электровелосипед рядом.</h2>
            <div class="info-cards">
                <div class="card"><div class="icon-wrapper"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg></div><div class="text-content"><span>Свободных</span><strong id="available-bikes-count">100</strong></div></div>
                <div class="card" id="balance-card"><div class="icon-wrapper dollar"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="1" x2="12" y2="23"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path></svg></div><div class="text-content"><span>Баланс</span><strong id="balance-amount">0 ₽</strong></div></div>
            </div>
            <div class="action-buttons">
                <button class="btn btn-primary" id="scan-qr-btn">Тарифы</button>
                <div class="secondary-actions">
                    <button class="btn btn-secondary text-btn" id="id-input-btn">Ввести ID</button>
                    <button class="btn btn-secondary text-btn" id="booking-btn">Бронь</button>
                    <button class="btn btn-secondary text-btn" id="extend-row-btn">Продление</button>
                </div>
            </div>
            <div id="extend-container" class="hidden extend-container"><button id="extend-rental-btn" class="btn btn-primary">Продлить аренду</button></div>
        `;
        initializeMainScreenEventListeners(startRentalFlow);
    };
    const renderActiveRentalView = (rental) => {
        const endsDate = new Date(rental.current_period_ends_at);
        const daysLeft = Math.ceil((endsDate - new Date()) / (1000 * 60 * 60 * 24));
        const durationDays = rental.tariffs?.duration_days || 7;
        const progress = Math.max(0, 100 - (daysLeft / durationDays * 100));

        mainContent.innerHTML = `
            <div class="bike-image-wrapper">
                <img src="bike-delivery.png" alt="Rented Electric bike" class="bike-image" width="1536" height="1024" decoding="async" fetchpriority="high">
            </div>
            <div class="progress-section">
                <div class="progress-bar-container"><div class="progress-bar" style="width: ${progress}%;"></div></div>
                <div class="progress-labels"><span>В аренде</span><span>Осталось ~${daysLeft} д.</span></div>
            </div>
            <h2>Ваша аренда активна</h2>
            <p style="text-align: center; color: var(--dark-green);">Следующее автоматическое списание ${endsDate.toLocaleDateString('ru-RU')}.</p>
            <div class="action-buttons">
                <button class="btn btn-primary" id="return-bike-btn">Сдать велосипед</button>
            </div>`;
        document.getElementById('return-bike-btn').addEventListener('click', returnBike);
    };

    const renderOverdueRentalView = (rental) => {
        mainContent.innerHTML = `
            <div class="bike-image-wrapper">
                <img src="bike-delivery.png" alt="Rented Electric bike" class="bike-image" width="1536" height="1024" decoding="async" fetchpriority="high" style="filter: grayscale(1);">
            </div>
            <h2 style="color: #e53e3e; text-align: center;">Аренда просрочена</h2>
            <p style="text-align: center; color: var(--dark-green);">Последний платеж не прошел. Пожалуйста, проверьте баланс карты.</p>
            <div class="action-buttons">
                <button class="btn btn-primary" id="retry-payment-btn">Повторить платеж</button>
                <button class="btn btn-secondary text-btn" id="return-bike-btn">Сдать велосипед</button>
            </div>`;
        document.getElementById('retry-payment-btn').addEventListener('click', retryPayment);
        document.getElementById('return-bike-btn').addEventListener('click', returnBike);
    };
    
    const renderPendingReturnView = (rental) => {
        mainContent.innerHTML = `
            <div class="bike-image-wrapper">
                <img src="bike-delivery.png" alt="Rented Electric bike" class="bike-image" width="1536" height="1024" decoding="async" fetchpriority="high" style="opacity: 0.7;">
            </div>
            <h2 style="text-align: center;">Ожидание сдачи</h2>
            <p style="text-align: center; color: var(--dark-green);">Заявка на сдачу принята. Автосписания остановлены. Ожидайте подтверждения администратора.</p>`;
    };
    const startRentalFlow = async () => {
        const tariffId = 1;
        const bikeId = "00001";
        
        const button = document.getElementById('scan-qr-btn') || document.getElementById('rent-flow-start-btn');
        if (!button) return;
        button.disabled = true;
        button.textContent = 'Создаем заказ...';

        try {
            const response = await fetch('/api/payments', {
                method: 'POST',
                body: JSON.stringify({ action: 'create-payment', userId: currentUser.id, bikeId, tariffId })
            });
            const data = await response.json();
            if (!response.ok) throw new Error(data.error || 'Неизвестная ошибка');
            if (data.confirmation_url) {
                window.location.href = data.confirmation_url;
            } else {
                throw new Error('Не удалось получить ссылку на оплату.');
            }
        } catch (error) {
            alert('Ошибка: ' + error.message);
            button.disabled = false;
            button.textContent = 'Арендовать велосипед';
        }
    };
    const returnBike = async () => {
        if (!activeRental || !confirm("Вы уверены, что хотите сдать велосипед?")) return;
        
        const { error } = await supabase
            .from('rentals')
            .update({ status: 'pending_return' })
            .eq('id', activeRental.id);
            
        if (error) {
            alert("Ошибка: " + error.message);
        } else {
            renderPendingReturnView(activeRental);
        }
    };
    const retryPayment = () => {
        alert("Пожалуйста, пополните привязанную карту. Система автоматически попытается списать средства в ближайшие часы.");
    };
    const initializePage = async () => {
        const userId = localStorage.getItem('userId');
        const { data: client, error: clientError } = await supabase.from('clients').select('*').eq('id', userId).single();
        if (clientError || !client) {
            console.error('Client load error:', clientError);
            return; // Exit if no client
        }
        currentUser = client;
        appHeader.textContent = `${currentUser.name ? currentUser.name.split(' ')[0] : 'Пользователь'}`;

        // Вызываем ВАШУ функцию `loadUserData`, но передаем ей колбэк
        loadUserData(supabase, () => {
            // Этот код выполнится, только если верификация пройдена
            checkAndRenderRentalStatus();
        });
    };
    const checkAndRenderRentalStatus = async () => {
        const { data: rental, error: rentalError } = await supabase
            .from('rentals')
            .select('*, tariffs(duration_days)')
            .eq('user_id', currentUser.id)
            .in('status', ['active', 'overdue', 'pending_return'])
            .order('created_at', { ascending: false })
            .limit(1)
            .single();
        if (rentalError && rentalError.code !== 'PGRST116') {
             console.error("Rental fetch error:", rentalError);
        }
        activeRental = rental;
        if (activeRental) {
            switch(activeRental.status) {
                case 'active': renderActiveRentalView(activeRental); break;
                case 'overdue': renderOverdueRentalView(activeRental); break;
                case 'pending_return': renderPendingReturnView(activeRental); break;
                default: renderDefaultView();
            }
        } else {
            renderDefaultView();
        }
    };
    
    // Запускаем всё
    initializePage();
}
    // Функция для показа экрана регистрации через бота
    function showBotRegistrationScreen() {
        document.querySelector('.app-screen').innerHTML = `
            <div class="app-content">
                <header class="app-header">
                    <h1>Регистрация</h1>
                </header>
                <main class="app-main" style="text-align: center; padding: 40px 20px;">
                    <h2>Для продолжения поделитесь вашим контактом</h2>
                    <p style="color: var(--text-secondary); margin: 20px 0;">Бот запросит номер телефона и другие данные для регистрации</p>
                    <button class="btn btn-primary" id="share-contact-btn" style="margin-top: 30px;">
                        📱 Поделиться контактом
                    </button>
                    <p style="color: var(--text-secondary); font-size: 0.9rem; margin-top: 20px;">
                        Или вернитесь в бота и отправьте /start
                    </p>
                </main>
            </div>
        `;

        // Обработчик кнопки
        document.getElementById('share-contact-btn').addEventListener('click', () => {
            if (window.Telegram && window.Telegram.WebApp) {
                // Запрашиваем контакт
                window.Telegram.WebApp.requestContact((success, contact) => {
                    if (success && contact) {
                        // Отправляем контакт боту
                        const data = {
                            action: 'start_registration',
                            phone: contact.phone_number,
                            first_name: contact.first_name,
                            last_name: contact.last_name
                        };
                        window.Telegram.WebApp.sendData(JSON.stringify(data));
                        // Закрываем WebApp
                        window.Telegram.WebApp.close();
                    } else {
                        alert('Не удалось получить контакт. Попробуйте еще раз.');
                    }
                });
            } else {
                alert('Telegram WebApp не доступен. Откройте приложение через бота.');
            }
        });
    }

    document.addEventListener('DOMContentLoaded', () => {
        initializeRentalSystem();
    });
    document.addEventListener('DOMContentLoaded', () => {
        const userName = localStorage.getItem('userName');
        if (userName) {
            document.querySelector('.app-header h1').textContent = '';
        }
        const appScreen = document.querySelector('.app-screen');
        const navLinks = document.querySelectorAll('.bottom-nav a.nav-item');
        const animationDuration = 400;

        appScreen.classList.add('page-enter');
        requestAnimationFrame(() => {
            appScreen.classList.remove('page-enter');
            appScreen.classList.add('page-enter-active');
        });

        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                if (link.parentElement.classList.contains('active') || link.classList.contains('active')) {
                    e.preventDefault();
                    return;
                }
                e.preventDefault();
                const destination = e.currentTarget.href;
                appScreen.classList.remove('page-enter-active');
                appScreen.classList.add('page-exit-active');
                setTimeout(() => {
                    window.location.href = destination;
                }, animationDuration);
            });
        });
        const balanceAmountElement = document.getElementById('balance-amount');
        const availableBikesCount = document.getElementById('available-bikes-count');
        const mainBikeImage = document.getElementById('main-bike-image');
        const progressBarFill = document.getElementById('progress-bar-fill');
        const progressStartLabel = document.getElementById('progress-start-label');
        const progressEndLabel = document.getElementById('progress-end-label');
        const bikeLabelElement = document.getElementById('bike-label');
        function saveAppState() {
            const appState = {
                balance: balanceAmountElement.textContent,
                availableBikes: availableBikesCount.textContent,
                bikeImage: mainBikeImage.getAttribute('src'),
                progressWidth: progressBarFill.style.width,
                progressColor: progressBarFill.style.backgroundColor,
                progressStart: progressStartLabel.textContent,
                progressEnd: progressEndLabel.textContent
            };
            localStorage.setItem('appState', JSON.stringify(appState));
        }

       // Файл: index.html, внутри <script>

       // --- НОВЫЕ ФУНКЦИИ РЕНДЕРИНГА И ДЕЙСТВИЙ ---
    const returnBike = async (rentalId) => {
        if (!rentalId || !confirm("Вы уверены, что хотите сдать велосипед?")) return;
        
        const { error } = await supabase
            .from('rentals')
            .update({ status: 'pending_return' })
            .eq('id', rentalId);
            
        if (error) {
            alert("Ошибка: " + error.message);
        } else {
            window.location.reload();
        }
    };
    
    const retryPayment = () => {
        alert("Пожалуйста, пополните привязанную карту. Система автоматически попытается списать средства в ближайшие часы.");
    };


    const renderDefaultView = (container) => {
        document.querySelector('.app-header')?.classList.remove('header-centered');
        container.innerHTML = `
            <div class="bike-image-wrapper">
                <img src="bike-delivery.png" alt="Electric bike" class="bike-image" id="main-bike-image" width="1536" height="1024" decoding="async" fetchpriority="high">
            </div>
            <div class="progress-section">
                <div class="progress-bar-container"><div class="progress-bar" id="progress-bar-fill"></div></div>
                <div class="progress-labels"><span id="progress-start-label">0 дней</span><span id="progress-end-label">...</span></div>
            </div>
            <h2>Найти и арендовать электровелосипед рядом.</h2>
            <div class="info-cards">
                <div class="card"><div class="icon-wrapper"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg></div><div class="text-content"><span>Свободных</span><strong id="available-bikes-count">...</strong></div></div>
                <div class="card" id="balance-card"><div class="icon-wrapper dollar"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="1" x2="12" y2="23"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path></svg></div><div class="text-content"><span>Баланс</span><strong id="balance-amount">0 ₽</strong></div></div>
            </div>
            <div class="action-buttons">
                <button class="btn btn-primary" id="scan-qr-btn">Тарифы</button>
                <div class="secondary-actions"><button class="btn btn-secondary" id="scan-icon-btn"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 7V5a2 2 0 0 1 2-2h2"></path><path d="M17 3h2a2 2 0 0 1 2 2v2"></path><path d="M21 17v2a2 2 0 0 1-2 2h-2"></path><path d="M7 21H5a2 2 0 0 1-2-2v-2"></path></svg></button><button class="btn btn-secondary text-btn" id="id-input-btn">Ввести ID</button><button class="btn btn-secondary text-btn" id="booking-btn">Бронь</button></div>
            </div>
            <div id="extend-container" class="hidden extend-container"><button id="extend-rental-btn" class="btn btn-primary">Продлить аренду</button></div>
        `;
    };

    async function loadUserData() {
    const userId = localStorage.getItem('userId');
    const appHeader = document.querySelector('.app-header'); // Находим заголовок

    if (!userId) {
        // Removed redirection to registration.html
        return;
    }

    try {
        const { data: client, error } = await supabase
            .from('clients')
            .select('verification_status, name, balance_rub, city') // <-- ИЗМЕНЕНИЕ 1
            .eq('id', userId)
            .single();

        if (error || !client) throw new Error(error ? error.message : "Клиент не найден.");

        const userName = client.name ? client.name.split(' ')[0] : 'Пользователь';
        const mainContent = document.querySelector('.app-main');
        const status = client.verification_status;

        appHeader.classList.remove('header-centered');

        if (status === 'approved') {
            appHeader.classList.add('header-centered');
            appHeader.querySelector('h1').textContent = '';
            
            const { data: rental, error: rentalError } = await supabase
                .from('rentals')
                .select('*, tariffs(*)')
                .eq('user_id', userId)
                .in('status', ['active', 'overdue', 'pending_return'])
                .order('created_at', { ascending: false })
                .limit(1)
                .single();

            if (rentalError && rentalError.code !== 'PGRST116') {
                console.error("Ошибка при получении аренды:", rentalError);
                mainContent.innerHTML = `<h2 style="text-align: center; color: red;">Не удалось загрузить данные об аренде.</h2>`;
                return;
            }

            if (rental) {
                switch(rental.status) {
                    case 'active':
                        renderActiveRentalView(rental, mainContent);
                        break;
                    case 'overdue':
                        renderOverdueRentalView(rental, mainContent);
                        break;
                    case 'pending_return':
                        renderPendingReturnView(rental, mainContent);
                        break;
                    default:
                        renderDefaultView(mainContent);
                        initializeMainScreenEventListeners();
                }
                loadAvailableBikesCount(client.city);
            } else {
                renderDefaultView(mainContent);
                loadAvailableBikesCount(client.city);
                initializeMainScreenEventListeners();
                (function(){
                    // Эта логика больше не нужна, все настроено в renderDefaultView
                })();
                        // --- ИЗМЕНЕНИЕ 2: ОБНОВЛЕНИЕ ОТОБРАЖЕНИЯ БАЛАНСА ---
                        if (typeof client.balance_rub !== 'undefined') {
                            updateBalanceDisplays(Number(client.balance_rub));
                        } else {
                            updateBalanceDisplays();
                        }
                
                        // --- REAL-TIME BALANCE SUBSCRIPTION ---
                        supabase
                            .channel(`client-balance-${userId}`)
                            .on('postgres_changes', {
                                event: 'UPDATE',
                                schema: 'public',
                                table: 'clients',
                                filter: `id=eq.${userId}`
                            }, payload => {
                                if (payload.new && typeof payload.new.balance_rub !== 'undefined') {
                                    console.log('Real-time balance update:', payload.new.balance_rub);
                                    updateBalanceDisplays(payload.new.balance_rub);
                                }
                            })
                            .subscribe();            }
        } else {
            appHeader.classList.add('header-centered');
            appHeader.querySelector('h1').textContent = '';
            
            let headerText = 'Ваш аккаунт на проверке';
            let statusTitle = 'На проверке';
            let statusSubtitle = 'до 24 часов';

            if (status === 'rejected') {
                headerText = 'В верификации отказано';
                statusTitle = 'Отклонено';
                statusSubtitle = 'Свяжитесь с поддержкой';
            }
            
            mainContent.innerHTML = `
                <div class="verification-container">
                    <h2 class="verification-header">${headerText}</h2>
                    <div class="verification-status-card">
                        <div class="verification-status-info">
                            <h3>${statusTitle}</h3>
                            ${status !== 'rejected' ? '<div class="progress-bar-container"><div class="progress-bar"></div></div>' : ''}
                            <p>${statusSubtitle}</p>
                        </div>
                    </div>
                    <h2>Чем заняться пока ждёте</h2>
                    <div class="actions-grid">
                        <div class="action-card" id="goto-profile-action">
                            <div class="icon-wrapper"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg></div>
                            <span>Заполнить профиль</span>
                        </div>
                        <div class="action-card" id="connect-card-action">
                             <div class="icon-wrapper"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="1" y="4" width="22" height="16" rx="2" ry="2"></rect><line x1="1" y1="10" x2="23" y2="10"></line></svg></div>
                            <span>Подключить карту</span>
                        </div>
                         <div class="action-card" id="support-action">
                            <div class="icon-wrapper"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path></svg></div>
                            <span>Поддержка</span>
                        </div>
                         <div class="action-card" id="invite-friend-action">
                            <div class="icon-wrapper"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><line x1="20" y1="8" x2="20" y2="14"></line><line x1="17" y1="11" x2="23" y2="11"></line></svg></div>
                            <span>Пригласить друга</span>
                        </div>
                    </div>
                </div>
            `;
            initializeVerificationScreenEventListeners();
        }
        
    } catch (err) {
        console.error("Ошибка загрузки данных пользователя:", err);
        appHeader.classList.add('header-centered');
        appHeader.querySelector('h1').textContent = `Ошибка`;
        mainContent.innerHTML = `<h2 style="text-align: center; color: red; padding-top: 40px;">Ошибка загрузки данных. Попробуйте позже.</h2>`;
    }
}

async function loadAvailableBikesCount(userCity) {
    if (!userCity) return;
    const { data: bikes, error } = await supabase
        .from('bikes')
        .select('id')
        .eq('city', userCity)
        .eq('status', 'available');
    if (!error && bikes) {
        const countEl = document.getElementById('available-bikes-count');
        if (countEl) countEl.textContent = bikes.length;
    }
}

// Функции initializeVerificationScreenEventListeners и initializeMainScreenEventListeners остаются без изменений

// Новая функция для навешивания событий на экране верификации
function initializeVerificationScreenEventListeners() {
    document.getElementById('goto-profile-action')?.addEventListener('click', () => {
        window.location.href = 'profile.html';
    });
    
    document.getElementById('connect-card-action')?.addEventListener('click', () => {
        // Здесь можно открыть модалку профиля сразу на разделе карты
        window.location.href = 'profile.html#card'; // или реализовать открытие модалки
    });

    document.getElementById('support-action')?.addEventListener('click', () => {
        // Открыть модальное окно поддержки
        // Предполагается, что у вас есть модалка с id="support-modal" в DOM index.html или вы перенаправляете
        alert('Переход в поддержку...');
    });

    document.getElementById('invite-friend-action')?.addEventListener('click', () => {
        const inviteLink = 'https://lucent-marshmallow-217b1e.netlify.app/registration.html?ref=12345';
        navigator.clipboard.writeText(inviteLink).then(() => {
            alert('Ссылка-приглашение скопирована в буфер обмена!');
        }).catch(err => {
            console.error('Ошибка копирования:', err);
            alert('Не удалось скопировать ссылку.');
        });
    });
}

// Новая функция для навешивания событий на главном экране (когда верификация пройдена)
function initializeMainScreenEventListeners() {
    // Вставьте сюда ВЕСЬ код с обработчиками событий, который был у вас на index.html
    // Например:
    document.getElementById('scan-qr-btn')?.addEventListener('click', () => { /* ... */ });
    document.getElementById('balance-card')?.addEventListener('click', () => { /* ... */ });
    // и так далее для всех кнопок...
}


        // При загрузке страницы получаем данные пользователя
        loadUserData();
        // После восстановления состояния проверяем, есть ли активная аренда
        if (typeof updateExtendButton === 'function') {
            updateExtendButton();
        }

        // ТЕПЕРЬ НАХОДИМ ВСЕ ОСТАЛЬНЫЕ ЭЛЕМЕНТЫ
        // (объявление bikeLabelElement перемещено выше, чтобы его можно было использовать в функциях сохранения)
        const scanBtn = document.getElementById('scan-qr-btn');
        const scanIconBtn = document.getElementById('scan-icon-btn');
        const idInputBtn = document.getElementById('id-input-btn');
        const extendRowBtn = document.getElementById('extend-row-btn');
        const bookingBtn = document.getElementById('booking-btn');
        const rentBtn = document.getElementById('rent-btn');
        const qrModal = document.getElementById('qr-modal');
        const qrModalCloseBtn = document.getElementById('qr-modal-close-btn');
        const idInputModal = document.getElementById('id-input-modal');
        const idInputModalCloseBtn = document.getElementById('id-input-modal-close-btn');
        const bikeIdInput = document.getElementById('bike-id-input');
        const confirmIdBtn = document.getElementById('confirm-id-btn');
        const bookingListModal = document.getElementById('booking-list-modal');
        const bookingListModalCloseBtn = document.getElementById('booking-list-modal-close-btn');
        const bikeList = document.querySelector('.bike-list');
        const balanceCard = document.getElementById('balance-card');
        const topupModal = document.getElementById('topup-modal');
        const topupModalCloseBtn = document.getElementById('topup-modal-close-btn');
        const payBtn = document.getElementById('pay-sbp-btn');
        const amountInput = document.getElementById('amount-input');
        const notificationToast = document.getElementById('notification-toast');
        const successToast = document.getElementById('success-toast');
        const successAmountSpan = document.getElementById('success-amount');
        const rentSuccessToast = document.getElementById('rent-success-toast');
        const bookingSuccessToast = document.getElementById('booking-success-toast');

        // Элементы для работы с SteelBike тарифами
        const tariffModal = document.getElementById('tariff-modal');
        const tariffModalCloseBtn = document.getElementById('tariff-modal-close-btn');

        /**
         * Настраиваем внешний вид кнопок на главном экране в зависимости
         * от выбранного способа оплаты (QR или SteelBike). По умолчанию
         * отображается кнопка «Сканировать QR‑код» и три дополнительных
         * действия. При выборе провайдера SteelBike основная кнопка
         * переименовывается в «Тарифы», а второстепенные кнопки для
         * сканирования и бронирования скрываются, оставляя только
         * возможность ввести ID.
         */
        function applyProviderUI() {
            const provider = localStorage.getItem('paymentProvider') || 'SteelBike';
            if (provider === 'SteelBike') {
                // Переименовываем основную кнопку
                scanBtn.textContent = 'Тарифы';
                // Скрываем иконку для сканирования и кнопку бронирования
                if (scanIconBtn) scanIconBtn.style.display = 'none';
                if (bookingBtn) bookingBtn.style.display = '';
            } else {
                // В режиме QR отображаем стандартную надпись и все второстепенные действия
                scanBtn.textContent = 'Тарифы';
                if (scanIconBtn) scanIconBtn.style.display = '';
                if (bookingBtn) bookingBtn.style.display = '';
            }
        }
        // Применяем настройки при инициализации страницы
        applyProviderUI();
        // Обновляем интерфейс при изменении хранилища (например, после изменения
        // способа оплаты в профиле). Это событие срабатывает в других вкладках,
        // поэтому в рамках одного окна может не возникнуть, но не мешает.
        window.addEventListener('storage', (e) => {
            if (e.key === 'paymentProvider') {
                applyProviderUI();
            }
        });

        // Дублируем обновление UI на событие storage, чтобы не зависеть от старых ссылок на элементы
        window.addEventListener('storage', (e) => {
            if (e.key !== 'paymentProvider') return;
            (function(){
                const _scanBtn = document.getElementById('scan-qr-btn');
                const _scanIconBtn = document.getElementById('scan-icon-btn');
                const _bookingBtn = document.getElementById('booking-btn');
                const _provider = localStorage.getItem('paymentProvider') || 'qr';
                if (!_scanBtn) return;
                if (_provider === 'SteelBike') {
                    _scanBtn.textContent = 'Тарифы';
                    if (_scanIconBtn) _scanIconBtn.style.display = 'none';
                    if (_bookingBtn) _bookingBtn.style.display = '';
                } else {
                    _scanBtn.textContent = 'Тарифы';
                    if (_scanIconBtn) _scanIconBtn.style.display = '';
                    if (_bookingBtn) _bookingBtn.style.display = '';
                }
            })();
        });

        // ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ
        const showToast = (toastElement, duration = 3000) => {
            toastElement.classList.remove('hidden');
            setTimeout(() => toastElement.classList.add('hidden'), duration);
        };
        const changeBikeImage = (newSrc) => {
            mainBikeImage.classList.add('fade-out');
            setTimeout(() => {
                mainBikeImage.src = newSrc; // <-- ИЗМЕНЕНИЕ: УБИРАЕМ file:///android_asset/
                mainBikeImage.classList.remove('fade-out');
                saveAppState();
            }, 300);
        };
        const addTransactionToHistory = (transaction) => {
            const history = JSON.parse(localStorage.getItem('bikeHistory')) || [];
            transaction.date = new Date().toISOString();
            history.push(transaction);
            localStorage.setItem('bikeHistory', JSON.stringify(history));
        };

        /**
         * Обновляет подпись на изображении велосипеда. Если пользователь
         * выбирает тариф SteelBike, мы отображаем название тарифа (Бронза,
         * Серебро или Золото). В других случаях отображаем номер
         * велосипеда, например «00001». После обновления сразу
         * сохраняем состояние, чтобы подпись сохранилась при перезагрузке.
         * @param {string} label — текст, который нужно вывести на багажнике
         */

        // ФУНКЦИИ АРЕНДЫ И БРОНИРОВАНИЯ
        const processRental = async () => {
    const rentBtnElement = document.getElementById('rent-btn');
    rentBtnElement.disabled = true;
    rentBtnElement.textContent = 'Создаем заказ...';

    const userId = localStorage.getItem('userId');
    if (!userId) {
        alert('Ошибка: не удалось определить пользователя.');
        rentBtnElement.disabled = false;
        rentBtnElement.textContent = 'Арендовать';
        return;
    }

    try {
        // Вызываем нашу Netlify функцию по специальному пути
        const response = await fetch('/.netlify/functions/create-payment', {
            method: 'POST',
            body: JSON.stringify({
                userId: userId,
                bikeId: '00001', 
                tariffId: 1
            })
        });

        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.error || 'Неизвестная ошибка сервера');
        }

        if (data.confirmation_url) {
            window.location.href = data.confirmation_url;
        } else {
            throw new Error('Не удалось получить ссылку на оплату.');
        }

    } catch (error) {
        alert('Не удалось создать заказ. Ошибка: ' + error.message);
        rentBtnElement.disabled = false;
        rentBtnElement.textContent = 'Арендовать';
    }
};
        const processBooking = () => {
            availableBikesCount.textContent = '99';
            changeBikeImage('bike00001.png');
            progressBarFill.style.width = '100%';
            progressBarFill.style.backgroundColor = '#f5a623';
            progressStartLabel.textContent = 'Забронирован';
            progressEndLabel.textContent = 'Остался 1 час';
            addTransactionToHistory({ type: 'Бронь', detail: 'На 1 час', amount: 0, icon: 'book' });
            qrModal.classList.add('hidden');
            showToast(bookingSuccessToast);
        };

        // === ЛОГИКА ДЛЯ ТАРИФОВ SteelBike ===
        // Определяем данные по тарифам: стоимость и длительность аренды (в днях)
        const tariffData = {
            bronze: { title: 'Бронза', cost: 1000, days: 3, deposit: 0 },
            silver: { title: 'Серебро', cost: 2000, days: 5, deposit: 0 },
            gold: { title: 'Золото', cost: 3750, days: 7, deposit: 0 }
        };
        // Если меню загрузило тарифы из локального API, обновляем эти значения.
        try {
            const tMapStr = sessionStorage.getItem('tariffMap');
            if (tMapStr) {
                const tMap = JSON.parse(tMapStr);
                Object.keys(tMap).forEach(key => {
                    const entry = tMap[key];
                    if (entry) {
                        // Preserve existing title if available
                        const existing = tariffData[key] || {};
                        tariffData[key] = {
                            title: existing.title || key,
                            cost: entry.cost,
                            days: entry.days,
                            id: entry.id,
                            deposit: entry.deposit || existing.deposit || 0,
                            // Сохраняем список доступных продлений, если задано
                            extensions: entry.extensions || existing.extensions || null
                        };
                    }
                });
            }
        } catch (err) {
            console.warn('Failed to parse tariffMap', err);
        }
        // Обработчик аренды по выбранному тарифу SteelBike
        const processTariffRental = async (tariffKey, selectedExt = null) => {
            const tariff = tariffData[tariffKey];
            if (!tariff || !tariff.id) {
                alert('Ошибка: не удалось определить тариф.');
                return;
            }

            const userId = localStorage.getItem('userId');
            if (!userId) {
                alert('Ошибка: не удалось определить пользователя.');
                return;
            }

            // Показываем состояние загрузки
            const rentBtn = document.getElementById('tariff-detail-select-btn');
            if(rentBtn) toggleButtonLoading(rentBtn, true, 'Выбрать тариф', 'Обработка...');

            try {
                // Сначала проверяем баланс клиента
                const { data: client, error: clientError } = await supabase
                    .from('clients')
                    .select('balance_rub')
                    .eq('id', userId)
                    .single();

                if (clientError) throw new Error('Не удалось получить данные клиента');

                const cost = selectedExt ? selectedExt.cost : tariff.cost;
                const hasEnoughBalance = client.balance_rub >= cost;

                if (hasEnoughBalance) {
                    // Списываем с баланса
                    const response = await fetch('/api/payments', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ action: 'charge-from-balance', userId: userId, tariffId: tariff.id })
                    });

                    const result = await response.json();
                    if (!response.ok) throw new Error(result.error || 'Ошибка списания с баланса');

                    // Показываем успех и обновляем интерфейс
                    showToast(rentSuccessToast);
                    loadUserData();
                } else {
                    // Баланса недостаточно - оплата картой
                    const response = await fetch('/api/payments', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ action: 'create-payment', userId: userId, tariffId: tariff.id })
                    });

                    const data = await response.json();
                    if (!response.ok) throw new Error(data.error || 'Неизвестная ошибка');

                    if (data.confirmation_url) {
                        window.location.href = data.confirmation_url;
                    } else {
                        throw new Error('Не удалось получить ссылку на оплату.');
                    }
                }

            } catch (err) {
                alert(`Ошибка оформления аренды: ${err.message}`);
            } finally {
                if(rentBtn) toggleButtonLoading(rentBtn, false, 'Выбрать тариф', 'Обработка...');
                // Закрываем все модальные окна
                document.getElementById('tariff-detail-modal').classList.add('hidden');
                document.getElementById('tariff-modal').classList.add('hidden');
            }
        };

        // Элементы и логика для подробного просмотра тарифов
        const tariffDetailModal = document.getElementById('tariff-detail-modal');
        const tariffDetailTitle = document.getElementById('tariff-detail-title');
        const tariffDetailPrice = document.getElementById('tariff-detail-price');
        const tariffDetailDuration = document.getElementById('tariff-detail-duration');
        const tariffDetailDeposit = document.getElementById('tariff-detail-deposit');
        const tariffDetailBackBtn = document.getElementById('tariff-detail-back-btn');
        const tariffDetailSelectBtn = document.getElementById('tariff-detail-select-btn');
        const tariffDetailCloseBtn = document.getElementById('tariff-detail-close-btn');
        // Список дополнительных вариантов длительности/стоимости для выбранного тарифа
        const tariffDetailExtList = document.getElementById('tariff-detail-extensions-list');
        // Текущий массив вариантов (из базы или рассчитанный по умолчанию)
        let currentDetailExtensions = null;
        let pendingTariffKey = null;

        // === Элементы и функции для продления аренды ===
        const extendContainer = document.getElementById('extend-container');
        const extendRentalBtn = document.getElementById('extend-rental-btn');
        const extendModal = document.getElementById('extend-modal');
        const extendOptionsList = document.getElementById('extend-options');
        const extendSelectBtn = document.getElementById('extend-select-btn');
        const extendCancelBtn = document.getElementById('extend-cancel-btn');
        const extendCloseBtn = document.getElementById('extend-close-btn');

        /**
         * Загружает текущую активную аренду из localStorage
         * @returns {object|null}
         */
        function loadActiveRental() {
            try {
                return JSON.parse(localStorage.getItem('activeRental')) || null;
            } catch (e) {
                return null;
            }
        }
        function showTariffDetail(tariffKey) {
    const t = tariffData[tariffKey];
    if (!t) {
        console.error(`Тариф с ключом "${tariffKey}" не найден!`);
        return;
    }

    pendingTariffKey = tariffKey;

    // Заполняем заголовок и описание
    document.getElementById('tariff-detail-title').textContent = t.title || tariffKey;
    document.getElementById('tariff-detail-description').textContent = t.short_description || t.description || '';

    const optionsContainer = document.getElementById('tariff-options-list');
    optionsContainer.innerHTML = ''; // Очищаем старые варианты

    // Определяем, какие варианты выбора у нас есть
    const extensions = (t.extensions && Array.isArray(t.extensions) && t.extensions.length > 0)
        ? t.extensions
        : [{ days: t.duration_days, cost: t.price_rub }];

    currentDetailExtensions = extensions; // Сохраняем для обработчика кнопки

    // Создаем карточки для каждого варианта
    extensions.forEach((ext, idx) => {
        const isChecked = (idx === 0) ? 'checked' : '';
        const isSelectedClass = (idx === 0) ? ' selected' : '';

        const optionHTML = `
            <label class="tariff-option-item${isSelectedClass}">
                <input type="radio" name="tariff-duration-option" value="${idx}" ${isChecked}>
                <div class="option-details">
                    <span class="option-duration">${ext.days} дней</span>
                </div>
                <span class="option-price">${ext.cost} ₽</span>
            </label>
        `;
        optionsContainer.insertAdjacentHTML('beforeend', optionHTML);
    });

    // Добавляем обработчик клика на весь список для делегирования
    optionsContainer.querySelectorAll('.tariff-option-item').forEach(label => {
        label.addEventListener('click', () => {
            // Снимаем выделение со всех
            optionsContainer.querySelectorAll('.tariff-option-item').forEach(el => el.classList.remove('selected'));
            // Добавляем выделение на кликнутый
            label.classList.add('selected');
            // Устанавливаем checked на внутренний radio
            label.querySelector('input[type="radio"]').checked = true;
        });
    });

    // Показываем модальное окно
    tariffModal.classList.add('hidden');
    tariffDetailModal.classList.remove('hidden');
}
        /**
         * Сохраняет активную аренду в localStorage
         * @param {object} obj
         */
        function saveActiveRental(obj) {
            try {
                localStorage.setItem('activeRental', JSON.stringify(obj));
            } catch (e) {}
        }

        /**
         * Показывает или скрывает кнопку продления аренды в зависимости от состояния
         */
        function updateExtendButton() {
            // Получаем элемент кнопки продления каждый раз при вызове функции.
            // Это избегает ошибок области видимости, которые возникали,
            // когда extendContainer был объявлен ниже и находился в TDZ (temporal dead zone).
            const extendContainerEl = document.getElementById('extend-container');
            const active = loadActiveRental();
            if (extendContainerEl) {
                if (active && active.status === 'active') {
                    extendContainerEl.classList.remove('hidden');
                } else {
                    extendContainerEl.classList.add('hidden');
                }
            }
        }

        /**
         * Строит список доступных вариантов продления в модалке
         * @param {Array} exts
         */
        function buildExtendOptions(exts) {
            if (!extendOptionsList) return;
            extendOptionsList.innerHTML = '';
            if (!exts || exts.length === 0) {
                const li = document.createElement('li');
                li.textContent = 'Нет доступных продлений.';
                extendOptionsList.appendChild(li);
                return;
            }
            exts.forEach((ext, idx) => {
                const li = document.createElement('li');
                li.innerHTML = `<label><input type="radio" name="extend-option" value="${idx}" ${idx === 0 ? 'checked' : ''}> ${ext.days} дней — ${ext.cost} ₽</label>`;
                extendOptionsList.appendChild(li);
            });
        }

        /**
         * Обрабатывает продление аренды: списывает средства, обновляет сроки, отправляет на сервер
         * @param {{days:number, cost:number}} ext
         */
        /**
         * Processes the rental extension by updating the database and UI.
         * @param {{days: number, cost: number}} ext - The selected extension option.
         */
        async function processExtension(ext) {
            if (!ext || !currentRentalForExtension) return;

            toggleButtonLoading(extendSelectBtn, true, 'Продлить', 'Обработка...');

            try {
                const userId = localStorage.getItem('userId');
                const newEndDate = new Date(currentRentalForExtension.current_period_ends_at);
                newEndDate.setDate(newEndDate.getDate() + ext.days);

                // Сначала проверяем баланс клиента
                const { data: client, error: clientError } = await supabase
                    .from('clients')
                    .select('balance_rub')
                    .eq('id', userId)
                    .single();

                if (clientError) throw new Error('Не удалось получить данные клиента');

                const hasEnoughBalance = client.balance_rub >= ext.cost;

                if (hasEnoughBalance) {
                    // Списываем с баланса
                    const { error: balanceError } = await supabase.rpc('add_to_balance', {
                        client_id_to_update: userId,
                        amount_to_add: -ext.cost
                    });
                    if (balanceError) throw new Error(`Ошибка списания баланса: ${balanceError.message}`);

                    // 2. Update rental
                    const { error: rentalError } = await supabase
                        .from('rentals')
                        .update({
                            current_period_ends_at: newEndDate.toISOString(),
                            total_paid_rub: (currentRentalForExtension.total_paid_rub || 0) + ext.cost
                        })
                        .eq('id', currentRentalForExtension.id);
                    if (rentalError) throw new Error(`Ошибка обновления аренды: ${rentalError.message}`);

                    // 3. Log payment
                    await supabase.from('payments').insert({
                        client_id: userId,
                        rental_id: currentRentalForExtension.id,
                        amount_rub: ext.cost,
                        status: 'succeeded',
                        payment_type: 'renewal',
                        payment_method_title: 'Списано с баланса',
                        description: 'Продление аренды'
                    });

                    // 4. Update UI
                    showToast(rentSuccessToast);
                    await loadUserData();
                } else {
                    // Баланса недостаточно - оплата картой
                    const response = await fetch('/api/payments', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ action: 'create-payment', userId: userId, amount: ext.cost, type: 'renewal', rentalId: currentRentalForExtension.id, days: ext.days })
                    });

                    const data = await response.json();
                    if (!response.ok) throw new Error(data.error || 'Неизвестная ошибка');

                    if (data.confirmation_url) {
                        window.location.href = data.confirmation_url;
                    } else {
                        throw new Error('Не удалось получить ссылку на оплату.');
                    }
                }

            } catch (err) {
                alert(`Не удалось продлить аренду: ${err.message}`);
            } finally {
                extendModal.classList.add('hidden');
                toggleButtonLoading(extendSelectBtn, false, 'Продлить', 'Обработка...');
            }
        }

        // Event listener for the final extend button in the modal
        if (extendSelectBtn) {
            extendSelectBtn.addEventListener('click', () => {
                const selected = extendOptionsList.querySelector('input[name="extend-option"]:checked');
                if (!selected || !currentRentalForExtension) return;

                const idx = parseInt(selected.value, 10);
                const t = currentRentalForExtension.tariffs;
                let ext = null;

                if (t && t.extensions && t.extensions.length > 0) {
                    ext = t.extensions[idx];
                } else if (t) {
                    // Fallback for tariffs without explicit extensions
                    ext = { days: t.duration_days, cost: t.price_rub };
                }

                if (ext) {
                    processExtension(ext);
                }
            });
        }

        // Event listeners for cancel and close buttons in extend modal
        if (extendCancelBtn) {
            extendCancelBtn.addEventListener('click', () => {
                extendModal.classList.add('hidden');
            });
        }
        if (extendCloseBtn) {
            extendCloseBtn.addEventListener('click', () => {
                extendModal.classList.add('hidden');
            });
        }

        // Назначаем обработчики для выбора тарифа
        
        if (tariffDetailBackBtn) {
            tariffDetailBackBtn.addEventListener('click', () => {
                tariffDetailModal.classList.add('hidden');
                tariffModal.classList.remove('hidden');
                pendingTariffKey = null;
            });
        }
        if (tariffDetailCloseBtn) {
            tariffDetailCloseBtn.addEventListener('click', () => {
                tariffDetailModal.classList.add('hidden');
                pendingTariffKey = null;
            });
        }
        if (document.getElementById('select-tariff-btn')) {
            document.getElementById('select-tariff-btn').addEventListener('click', () => {
                if (!pendingTariffKey) return;

                // Находим выбранный вариант
                const selectedRadio = document.querySelector('input[name="tariff-duration-option"]:checked');
                if (!selectedRadio) {
                    alert('Пожалуйста, выберите вариант аренды.');
                    return;
                }

                const selectedIndex = parseInt(selectedRadio.value, 10);
                const selectedExtension = currentDetailExtensions[selectedIndex];

                if (!selectedExtension) {
                    alert('Ошибка при выборе варианта. Попробуйте еще раз.');
                    return;
                }

                // Закрываем окно и запускаем процесс аренды с выбранными данными
                tariffDetailModal.classList.add('hidden');
                processTariffRental(pendingTariffKey, selectedExtension);
                pendingTariffKey = null;
            });
        }
        if (tariffDetailCloseBtn) {
            tariffDetailCloseBtn.addEventListener('click', () => {
                tariffDetailModal.classList.add('hidden');
                pendingTariffKey = null;
            });
        }

        // Закрытие модалки тарифов
        tariffModalCloseBtn.addEventListener('click', () => {
            tariffModal.classList.add('hidden');
        });
        tariffModal.addEventListener('click', (e) => {
            if (e.target === tariffModal) tariffModal.classList.add('hidden');
        });

        // ========== ПОДДЕРЖКА ДИНАМИЧЕСКОЙ ЗАГРУЗКИ ТАРИФОВ SteelBike ==========
        /**
         * Загружает список тарифов из API (или localStorage, если сеть недоступна).
         * Обновляет содержимое списка в модальном окне и сохраняет map в sessionStorage,
         * чтобы функции оформления аренды могли использовать актуальные данные (цена,
         * длительность, депозит, extensions).
         */
        async function loadSteelBikeTariffs() {
            let data;
            try {
                const { data: supabaseData, error } = await supabase
                    .from('tariffs')
                    .select('*')
                    .eq('is_active', true)
                    .order('id', { ascending: true });

                if (error) throw error;
                
                data = supabaseData;
                // Сохраняем для офлайн работы
                localStorage.setItem('tariffs', JSON.stringify(data));
            } catch (err) {
                console.warn('Failed to fetch tariffs from Supabase, falling back to localStorage.', err);
                try {
                    data = JSON.parse(localStorage.getItem('tariffs') || '[]');
                } catch (e) {
                    data = [];
                }
            }
            
            // Data is already filtered by the query
            const activeTariffs = data || [];
            const list = document.querySelector('#tariff-modal .bike-list');
            if (list) {
                list.innerHTML = '';
                activeTariffs.forEach((t) => {
                    const key = t.slug || (t.title ? t.title.toLowerCase().replace(/\s+/g, '-') : '');
                    const item = document.createElement('div');
                    item.className = 'bike-list-item tariff-option';
                    item.dataset.tariff = key;
                    item.dataset.tariffId = t.id;
                    item.innerHTML = `<strong>${t.title}</strong><span>${t.price_rub} ₽ / ${t.duration_days} дней</span><p style="font-size: 0.9rem; color: var(--text-secondary); margin: 4px 0 0 0;">${t.short_description || ''}</p>`;
                    // Навешиваем обработчик выбора тарифа здесь, чтобы убирать модальное
                    item.addEventListener('click', () => {
                        showTariffDetail(key);
                    });
                    list.appendChild(item);
                });
            }
            // Формируем карту данных тарифов для использования в processTariffRental
            const tariffMap = {};
            (data || []).forEach((t) => {
                let extensions = null;
                if (t.extensions) {
                    try {
                        extensions = typeof t.extensions === 'string' ? JSON.parse(t.extensions) : t.extensions;
                    } catch (e) {
                        extensions = null;
                    }
                }
                const key = t.slug || (t.title ? t.title.toLowerCase().replace(/\s+/g, '-') : '');
                tariffMap[key] = {
                    id: t.id,
                    cost: t.price_rub,
                    days: t.duration_days,
                    deposit: t.deposit_rub || 0,
                    title: t.title,
                    extensions: extensions,
                    short_description: t.short_description || '',
                    description: t.description || ''
                };
            });
            try {
                sessionStorage.setItem('tariffMap', JSON.stringify(tariffMap));
            } catch (e) {
                console.warn('Failed to store tariffMap', e);
            }

            // Обновляем глобальный объект tariffData, чтобы включить новые тарифы
            try {
                Object.keys(tariffMap).forEach(key => {
                    const entry = tariffMap[key];
                    if (!entry) return;
                    const existing = tariffData[key] || {};
                    tariffData[key] = {
                        title: existing.title || entry.title || key,
                        cost: entry.cost,
                        days: entry.days,
                        deposit: entry.deposit || existing.deposit || 0,
                        id: entry.id,
                        extensions: entry.extensions || existing.extensions || null,
                        description: entry.description || existing.description || '',
                        short_description: entry.short_description || existing.short_description || ''
                    };
                });
            } catch (err) {
                console.warn('Failed to update tariffData', err);
            }

        }

        // ОБРАБОТЧИКИ СОБЫТИЙ
        scanBtn.addEventListener('click', () => {
            // В зависимости от выбранного способа оплаты открываем соответствующее окно
            const provider = localStorage.getItem('paymentProvider') || 'qr';
            if (provider === 'SteelBike') {
                // Перед открытием окна подгружаем актуальные тарифы
                loadSteelBikeTariffs().then(() => {
                    tariffModal.classList.remove('hidden');
                });
            } else {
                rentBtn.textContent = 'Арендовать';
                rentBtn.dataset.action = 'rent';
                qrModal.classList.remove('hidden');
            }
        });
        if (scanIconBtn) scanIconBtn.addEventListener('click', () => scanBtn.click());

        if (idInputBtn) idInputBtn.addEventListener('click', () => idInputModal.classList.remove('hidden'));
        if (extendRowBtn) {
            extendRowBtn.addEventListener('click', () => {
                // Переиспользуем ту же логику, что и у кнопки внутри блока продления
                const active = (function(){ try { return JSON.parse(localStorage.getItem('activeRental')) || null; } catch(e){ return null } })();
                if (!active) {
                    alert('Нет активной аренды для продления.');
                    return;
                }
                const t = tariffData[active.tariffKey];
                if (!t) return;
                let exts;
                if (t.extensions && Array.isArray(t.extensions) && t.extensions.length > 0) {
                    exts = t.extensions;
                } else {
                    const fallbackDays = [7, 14, 30];
                    exts = fallbackDays.map(d => ({ days: d, cost: Math.round((t.cost || 0) * (d / (t.days || 7))) }));
                }
                buildExtendOptions(exts);
                extendModal.classList.remove('hidden');
            });
        }
        confirmIdBtn.addEventListener('click', () => {
            const enteredId = bikeIdInput.value.trim();
            // В текущей версии доступен только велосипед #00001, но в будущем можно проверять другие ID
            if (enteredId === '00001') {
                idInputModal.classList.add('hidden');
                scanBtn.click();
            } else {
                alert('Велосипед с таким ID не найден.');
            }
        });
        bookingBtn.addEventListener('click', () => bookingListModal.classList.remove('hidden'));
        bikeList.addEventListener('click', (e) => {
            const bikeItem = e.target.closest('.bike-list-item');
            if (bikeItem) {
                // Сохраняем выбранный ID
                const selectedId = bikeItem.dataset.bikeId;
                bookingListModal.classList.add('hidden');
                rentBtn.textContent = 'Забронировать на час';
                rentBtn.dataset.action = 'book';
                const qrTitleEl = qrModal.querySelector('h2');
                if (qrTitleEl) { qrTitleEl.innerHTML = `Вы бронируете<br>Электровелосипед #${selectedId || '00001'}`; }
                qrModal.classList.remove('hidden');
            }
        });
        rentBtn.addEventListener('click', () => {
            if (rentBtn.dataset.action === 'book') {
                processBooking();
            } else {
                processRental();
            }
        });

        [qrModalCloseBtn, idInputModalCloseBtn, bookingListModalCloseBtn, topupModalCloseBtn].forEach(btn => {
            btn.addEventListener('click', () => btn.closest('.modal-overlay').classList.add('hidden'));
        });
        [qrModal, idInputModal, bookingListModal, topupModal].forEach(modal => {
            modal.addEventListener('click', (e) => { if (e.target === modal) modal.classList.add('hidden'); });
        });

        balanceCard.addEventListener('click', () => topupModal.classList.remove('hidden'));
        payBtn.addEventListener('click', async () => {
    const amount = parseFloat(amountInput.value);
    if (isNaN(amount) || amount <= 0) {
        alert('Пожалуйста, введите корректную сумму.');
        return;
    }

    const userId = localStorage.getItem('userId');
    if (!userId) {
        alert('Ошибка: не удалось определить пользователя.');
        return;
    }
    
    payBtn.disabled = true;
    payBtn.textContent = 'Создаем счет...';

    try {
        const response = await fetch('/api/payments', {
            method: 'POST',
            body: JSON.stringify({
                action: 'create-payment',
                userId: userId,
                amount: amount // Передаем сумму для пополнения
            })
        });

        const data = await response.json();
        if (!response.ok) throw new Error(data.error || 'Неизвестная ошибка сервера');

        if (data.confirmation_url) {
            // Если карты нет, отправляем на страницу оплаты
            window.location.href = data.confirmation_url;
        } else if (data.status === 'pending' || data.status === 'succeeded') {
            // Если карта есть и автосписание прошло
            topupModal.classList.add('hidden');
            alert('Баланс будет пополнен в течение минуты. Вы получите уведомление.');
            // В будущем здесь нужно будет обновить баланс пользователя, запросив его с сервера
        } else {
            throw new Error('Произошла неизвестная ошибка при обработке платежа.');
        }

    } catch(error) {
        alert('Ошибка пополнения: ' + error.message);
    } finally {
        payBtn.disabled = false;
        payBtn.textContent = 'Пополнить';
    }
});



        // Делегированные клики для элементов, которые могут пересобираться
        document.addEventListener('click', (e) => {
            const scan = e.target.closest('#scan-qr-btn');
            const balance = e.target.closest('#balance-card');
            const idbtn = e.target.closest('#id-input-btn');
            const extend = e.target.closest('#extend-row-btn');
            const booking = e.target.closest('#booking-btn');

            if (scan) {
                e.preventDefault();
                // Всегда открываем модальное окно с тарифами
                loadSteelBikeTariffs().then(() => {
                    const modal = document.getElementById('tariff-modal');
                    if (modal) modal.classList.remove('hidden');
                });
                return;
            }

            if (balance) {
                e.preventDefault();
                const modal = document.getElementById('topup-modal');
                if (modal) modal.classList.remove('hidden');
                return;
            }

            if (idbtn) {
                e.preventDefault();
                const modal = document.getElementById('id-input-modal');
                if (modal) modal.classList.remove('hidden');
                return;
            }

            if (extend) {
                e.preventDefault();
                let active = null;
                try { active = JSON.parse(localStorage.getItem('activeRental')) || null; } catch(_) {}
                if (!active) { alert('Нет активной аренды для продления.'); return; }
                const t = (typeof tariffData !== 'undefined' ? tariffData : (window.tariffData || {}))[active.tariffKey];
                if (!t) { alert('Не найден базовый тариф для продления.'); return; }
                let exts;
                if (t.extensions && Array.isArray(t.extensions) && t.extensions.length > 0) {
                    exts = t.extensions;
                } else {
                    const baseDays = t.days || 7;
                    const baseCost = t.cost || 0;
                    const fallbackDays = [7, 14, 30];
                    exts = fallbackDays.map(d => ({ days: d, cost: Math.round(baseCost * (d / baseDays)) }));
                }
                const list = document.getElementById('extend-options');
                if (list) {
                    list.innerHTML = '';
                    exts.forEach((ext, idx) => {
                        const li = document.createElement('li');
                        li.innerHTML = `<label><input type="radio" name="extend-option" value="${idx}" ${idx===0?'checked':''}> ${ext.days} дней - ${ext.cost} ₽</label>`;
                        list.appendChild(li);
                    });
                }
                const modal = document.getElementById('extend-modal');
                if (modal) modal.classList.remove('hidden');
            }

            if (booking) {
                e.preventDefault();
                const modal = document.getElementById('booking-list-modal');
                if (modal) modal.classList.remove('hidden');
            }
        });
});
</script>
    <!-- Общий скрипт меню SteelBike, подключается после основного скрипта -->
    <script src="menu.js" defer></script>

    <!-- Geolocation Tracking Script -->
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const userId = localStorage.getItem('userId');
            if (!userId) return; // Only track logged-in users

            function startTracking() {
                if (!navigator.geolocation) {
                    console.log('Geolocation is not supported by your browser');
                    return;
                }

                function success(position) {
                    const latitude  = position.coords.latitude;
                    const longitude = position.coords.longitude;

                    console.log(`Sending location: ${latitude}, ${longitude}`);

                    fetch('/api/user', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ action: 'update-location', userId, latitude, longitude })
                    }).catch(err => console.error('Failed to send location:', err));
                }

                function error() {
                    console.log('Unable to retrieve your location');
                }

                // Initial position send
                navigator.geolocation.getCurrentPosition(success, error);

                // Send posiasdsadtion every 30 seconds
                setInterval(() => {
                    navigator.geolocation.getCurrentPosition(success, error);
                }, 30000);
            }

            // Ask for permission and start tracking
            navigator.permissions.query({name:'geolocation'}).then(function(result) {
                if (result.state === 'granted') {
                    startTracking();
                } else if (result.state === 'prompt') {
                    // We can ask the user with a button click, but for now, we'll just start
                    // which will trigger the browser's native prompt.
                    startTracking();
                }
                // If state is 'denied', we can't do anything.13213231
            });
        });
    </script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Проверяем, что API Telegram доступен
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;

            // Устанавливаем фиксированный цвет шапки
            tg.setHeaderColor('#ffffff');
        }
    });
</script>
    
</body>
</html>

